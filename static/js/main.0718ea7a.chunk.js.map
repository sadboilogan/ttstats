{"version":3,"sources":["StatusPage.js","App3.js","serviceWorker.js","index.js"],"names":["StatusPage","props","state","servers","console","log","serversList","forEach","server","push","error","isLoaded","close","index","this","fetchServer","fetch","ip","then","res","json","setState","playersData","players","serverData","lastUpdate","Date","now","map","key","name","style","color","onClick","length","limit","React","Component","Home","About","Boolean","window","location","hostname","match","ReactDOM","render","basename","to","component","search","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ylEAgCqBA,E,YACjB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,IAEXC,QAAQC,IAAI,4BAEZC,EAAYC,SAAQ,SAAAC,GAAM,OAAE,EAAKN,MAAMC,QAAQM,KAAK,CAClDC,MAAO,KACPC,UAAU,EACV,GAAMH,EAAO,GACb,KAAQA,EAAO,GACf,YAAe,KACf,WAAc,KACd,WAAc,UAGhB,EAAKI,MAAQ,SAASC,GACpB,OAAOC,KAAKC,YAAYD,KAAKZ,MAAMC,QAAQU,GAAOA,IASpD,EAAKE,YAAc,SAACP,EAAOK,GAEzBG,MAAM,8CAA8CR,EAAOS,GAAG,+BAC7DC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACC,GACC,EAAKE,UAAS,SAAAnB,GAAU,IACfC,EAAWD,EAAXC,QAKP,OAJAA,EAAQU,GAAOF,UAAW,EAC1BR,EAAQU,GAAOS,YAAcH,EAAII,QACjCpB,EAAQU,GAAOW,WAAaL,EAAIX,OAChCL,EAAQU,GAAOY,WAAaC,KAAKC,MAC1B,CAACxB,iBAGZ,SAACO,GACC,EAAKW,UAAS,SAAAnB,GAAU,IACfC,EAAWD,EAAXC,QAGP,OAFAA,EAAQU,GAAOF,UAAW,EAC1BR,EAAQU,GAAOH,MAAQA,EAChB,CAACP,kBA/CC,E,iFA0DjBW,KAAKZ,MAAMC,QAAQI,QAAQO,KAAKC,e,+BAIxB,IAAD,OACP,OAEA,+BAEE,+BAEGD,KAAKZ,MAAMC,QAAQyB,KAAI,SAACpB,EAAOK,GAChC,OAAIL,EAAOE,MAGL,wBAAImB,IAAKhB,GAAO,4BAAKL,EAAOS,IAAQ,4BAAKT,EAAOsB,MAAU,mCAAY,wBAAIC,MAAO,CAACC,MAAO,QAAnB,YAEhExB,EAAOG,SAOf,wBAAIkB,IAAKhB,EAAOoB,QAAS,kBAAI,EAAKrB,MAAMC,KAAQ,4BAAKL,EAAOS,IAAQ,4BAAKT,EAAOsB,MAAU,4BAAKtB,EAAOc,YAAYY,OAAxB,IAAiC1B,EAAOgB,WAAWW,OAAW,wBAAIJ,MAAO,CAACC,MAAO,SAAnB,UAAuC,4BAAKxB,EAAOiB,aAL3M,wBAAII,IAAKhB,GAAO,4BAAKL,EAAOS,IAAQ,4BAAKT,EAAOsB,MAAU,mCAAY,wBAAIC,MAAO,CAACC,MAAO,SAAnB,qB,GA9E5CI,IAAMC,W,OC2B9C,SAASC,IACL,OAEE,6BACE,sCAKR,SAASC,IACP,OAEE,6BACE,sCC5DcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAO,mBFDD,WACb,OACE,kBAAC,IAAD,CAAQC,SAAS,WACjB,gCACE,4BACE,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,aAmBR,8BACE,kBAAC,IAAD,CAAOC,UACL,SAAChD,GACG,OAAOA,EAAMyC,SAASQ,QAClB,IAAM,UAEF,OAAO,kBAACX,EAAD,MACX,IAAM,UACF,OAAO,kBAAC,EAAD,MACX,IAAM,GACF,OAAO,kBAACD,EAAD,MACX,QACI,OAAO,kBAAC,IAAD,CAAUU,GAAG,WAIpC,gCACE,yCE1CU,MAASG,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.0718ea7a.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport \"./StatusPage.css\";\r\nimport serversList from \"./serversList.json\";\r\n\r\n\r\n// function fetchServer(_this,server,index){\r\n//   //https://cors-anywhere.herokuapp.com/\r\n//   fetch(\"http://\"+server.ip+\"/status/widget/players.json\")\r\n//   .then(res => res.json())\r\n//   .then(\r\n//     (res) => {\r\n//       _this.setState(state => {\r\n//         const {servers} = state;\r\n//         servers[index].isLoaded = true;\r\n//         servers[index].playersData = res.players;\r\n//         servers[index].serverData = res.server;\r\n//         servers[index].lastUpdate = Date.now();\r\n//         return {servers};\r\n//       });\r\n//     },\r\n//     (error) => {\r\n//       _this.setState(state => {\r\n//         const {servers} = state;\r\n//         servers[index].isLoaded = true;\r\n//         servers[index].error = error;\r\n//         return {servers};\r\n//       });\r\n//     }\r\n//   )\r\n// }\r\n\r\nexport default class StatusPage extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        servers: []\r\n      };\r\n      console.log(\"construcitng status page\")\r\n\r\n      serversList.forEach(server=>this.state.servers.push({\r\n        error: null,\r\n        isLoaded: false,\r\n        \"ip\": server[0],\r\n        \"name\": server[1],\r\n        \"playersData\": null,\r\n        \"serverData\": null,\r\n        \"lastUpdate\": null\r\n      }));\r\n\r\n      this.close = function(index){\r\n        return this.fetchServer(this.state.servers[index],index);\r\n        // return fetchServer(this,this.state.servers[index],index);\r\n        // this.setState(state => {\r\n        //   const {servers} = state;\r\n        //   servers[index].ip = \"n/a\";\r\n        //   return {servers};\r\n        // });\r\n      }\r\n\r\n      this.fetchServer = (server,index) => {\r\n        //https://cors-anywhere.herokuapp.com/\r\n        fetch(\"https://cors-anywhere.herokuapp.com/http://\"+server.ip+\"/status/widget/players.json\")\r\n        .then(res => res.json())\r\n        .then(\r\n          (res) => {\r\n            this.setState(state => {\r\n              const {servers} = state;\r\n              servers[index].isLoaded = true;\r\n              servers[index].playersData = res.players;\r\n              servers[index].serverData = res.server;\r\n              servers[index].lastUpdate = Date.now();\r\n              return {servers};\r\n            });\r\n          },\r\n          (error) => {\r\n            this.setState(state => {\r\n              const {servers} = state;\r\n              servers[index].isLoaded = true;\r\n              servers[index].error = error;\r\n              return {servers};\r\n            });\r\n          }\r\n        )\r\n      }\r\n\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {          \r\n      this.state.servers.forEach(this.fetchServer);\r\n    }\r\n\r\n\r\n    render() {\r\n      return (\r\n        \r\n      <table>\r\n         \r\n        <tbody>\r\n\r\n          {this.state.servers.map((server,index)=>{\r\n          if (server.error) {\r\n              // return <div key={index}><h2>Error: {server.error.message}</h2></div>;\r\n              return (\r\n                <tr key={index}><td>{server.ip}</td><td>{server.name}</td><td>-/-</td><td style={{color: \"red\"}}>Offline</td></tr>\r\n              );\r\n          } else if (!server.isLoaded) {\r\n            return (\r\n              <tr key={index}><td>{server.ip}</td><td>{server.name}</td><td>-/-</td><td style={{color: \"grey\"}}>Loading</td></tr>\r\n            );\r\n          } else {\r\n\r\n            return (\r\n              <tr key={index} onClick={()=>this.close(index)}><td>{server.ip}</td><td>{server.name}</td><td>{server.playersData.length}/{server.serverData.limit}</td><td style={{color: \"blue\"}}>Online</td><td>{server.lastUpdate}</td></tr>\r\n              // {playersData.map(item => (\r\n              //     <tr key={item[2]}><td>{item[0]}#{item[2]}</td><td>{item[5]}</td></tr>\r\n              // ))}\r\n            );\r\n          }\r\n        })}\r\n\r\n      </tbody>\r\n      </table>\r\n      )\r\n    }\r\n}\r\n\r\n\r\n  /*\r\nfunction load() {\r\n    fetch(\"http://54.37.88.125:30123/status/map/positions.json\") //https://cors-anywhere.herokuapp.com/http://145.239.150.71:30122/status/widget/players.json\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          return {\r\n            isLoaded: true,\r\n            items: result.items\r\n          };\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\nexport default async function StatusPage(){\r\n    const data = load();\r\n    console.log(data);\r\n    return (\r\n        <ul>\r\n          {data.map(item => (\r\n            <li key={data.name}>\r\n              {data.name} {data.price}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n}\r\n\r\n*/","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport StatusPage from \"./StatusPage.js\";\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router basename=\"ttstats\">\r\n    <header>\r\n      <ul>\r\n        <li><Link to=\"/\">Page 1</Link></li>\r\n        <li><Link to=\"?status\">Status</Link></li>\r\n        <li><Link to=\"?potato\">Page 3</Link></li>\r\n      </ul>\r\n      {/* <Route\r\n          path=\"/blog/:slug?\"\r\n          render={({ match }) => {\r\n              {console.log(match)}\r\n              return <div />;\r\n          }}\r\n      /> */}\r\n\r\n      {/* <Route\r\n          path=\"/kebat\"\r\n          render={({ match }) => {\r\n              {console.log(match)}\r\n              return <div />;\r\n          }}\r\n      /> */}\r\n\r\n    </header>\r\n    <main>\r\n      <Route component={\r\n        (props)=>{\r\n            switch(props.location.search){\r\n                case (\"?potato\"):\r\n                    // return <MyComponent/>;\r\n                    return <About/>;\r\n                case (\"?status\"):\r\n                    return <StatusPage/>;\r\n                case (\"\"):\r\n                    return <Home/>;\r\n                default:\r\n                    return <Redirect to=\"/\"/>;\r\n            }\r\n        }}/>\r\n    </main>\r\n    <footer>\r\n      <p>Footer</p>\r\n    </footer>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n    return (\r\n        \r\n      <div>\r\n        <h2>Page1</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\nfunction About() {\r\n  return (\r\n      \r\n    <div>\r\n      <h2>Page3</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App3';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["_Dispatch.js","_Store.js","components/ServersStatus.js","components/ServerInfo.js","components/PlayerFinder.js","components/JobsStats.js","components/VehicleStats.js","components/Footer.js","index.js","App.js"],"names":["timeout","promise","Promise","resolve","reject","setTimeout","Error","then","initAllServers","dispatch","type","serversListJSON","forEach","server","index","data","fetchServer","fetch","res","json","players","player","isLoaded","playersData","serverData","lastUpdate","Date","now","error","catch","fetchDetailedServer","ip","vehicleData","map","err","console","log","reducer","action","tempArray","servers","slice","splice","inited","initialState","StoreContext","createContext","StoreProvider","children","useReducer","state","useEffect","dispatchList","Provider","value","ServersStatus","store","useContext","id","key","name","className","undefined","href","title","length","limit","uptime","to","reduce","acc","ServerInfo","props","urlprop","parseInt","url","isNaN","header","target","rel","src","height","alt","toTimeString","PlayersList","jobselectURL","item","split","decodeURI","useState","playerFinderMessages","playerFinderInputField","playerFinderFound","serverSelect","jobSelect","localState","setlocalState","jobList","setJobList","handlePlayerFinderSubmit","isButton","input","toLowerCase","playername","includes","push","s","tempJobsList","placeholder","onChange","handlePlayersNameInput","onKeyDown","e","preventDefault","htmlFor","handleJobSelect","job","onClick","colorArray","JobsStats","entries","counter","setState","state2","setState2","chartRef","useRef","jobs","companyjobs","startsWith","sortedEntries","Object","sort","item1","item2","sortedEntriesCompany","val","current","getContext","instance","Chart","labels","datasets","backgroundColor","borderWidth","options","legend","display","responsive","tooltips","callbacks","label","tooltipItem","dataset","datasetIndex","total","previousValue","currentValue","percentage","Math","floor","destroy","Number","toFixed","encodeURI","ref","VehicleStats","list","totalCounter","vehicle","vehicle_model","vehicle_name","values","a","b","Timer","online","ReactDOM","render","React","document","basename","component","location","search","getElementById"],"mappings":"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","file":"static/js/main.07385121.chunk.js","sourcesContent":["import serversListJSON from \"./data/serversList.json\";\r\n\r\nconst timeout = (promise) => new Promise(function(resolve, reject) {\r\n    setTimeout(() => reject(new Error(\"timeout\")), 2000)\r\n    promise.then(resolve, reject)\r\n})\r\n\r\nexport const initAllServers = () => dispatch => {\r\n    dispatch({type: \"CLEARSERVERSLIST\"})\r\n\r\n    serversListJSON.forEach((server,index) => {\r\n        dispatch({\r\n            type: \"ADDSERVER\",\r\n            data: {\r\n                \"error\": null,\r\n                \"isLoaded\": false,\r\n                \"ip\": server[0],\r\n                \"name\": server[1],\r\n                \"playersData\": null,\r\n                \"serverData\": null,\r\n                \"lastUpdate\": null,\r\n                \"vehicleData\": null\r\n            },\r\n            index\r\n        })\r\n        fetchServer(server,index)(dispatch);\r\n    });\r\n\r\n    dispatch({type: \"SERVERSINITED\"})\r\n};\r\n\r\nexport const fetchServer = (server,index) => dispatch => {\r\n    timeout(\r\n        fetch(\"http://\"+server[0]+\"/status/widget/players.json\")\r\n        .then(res => res.json())\r\n        ).then(\r\n        (res) => {\r\n            res.players.forEach(player=>{if(player[5] === \"\") player[5] = \"Unemployed\";});\r\n            \r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    isLoaded: true,\r\n                    playersData: res.players,\r\n                    serverData: res.server,\r\n                    lastUpdate: Date.now()\r\n                },\r\n                index\r\n            })\r\n        },\r\n        () => {\r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    isLoaded: true,\r\n                    error: true,\r\n                    lastUpdate: Date.now()\r\n                },\r\n                index\r\n            })\r\n        }\r\n    ).catch(() => {\r\n        dispatch({\r\n            type: \"UPDATESERVER\",\r\n            data: {\r\n                isLoaded: true,\r\n                error: true,\r\n                lastUpdate: Date.now()\r\n            },\r\n            index\r\n        })\r\n})}\r\n\r\nexport const fetchDetailedServer = (server,index) => dispatch => {\r\n    timeout(\r\n        fetch(\"http://\"+server.ip+\"/status/map/positions.json\")\r\n        .then(res => res.json()))\r\n        .then(res => {\r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    vehicleData: res.players.map(player=>player[4])\r\n                },\r\n                index\r\n            });\r\n    }).catch((err)=>console.log(err))\r\n}","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport * as dispatchList from \"./_Dispatch.js\"\r\n\r\nconst reducer = (data, action) => {\r\n    switch(action.type){\r\n        case (\"ADDSERVER\"):\r\n            const tempArray = data.servers.slice();\r\n            tempArray.splice(action.index, 0, action.data);\r\n            data.servers = tempArray;\r\n            return {...data};\r\n\r\n        case (\"SERVERSINITED\"):\r\n            return {...data, inited: true};\r\n\r\n        case (\"UPDATESERVER\"):\r\n            data.servers = data.servers.map((data, index) => index !== action.index ? data : {\r\n                  ...data,\r\n                  ...action.data\r\n                });\r\n            return {...data};\r\n\r\n        case (\"CLEARSERVERSLIST\"):\r\n            data.servers = [];\r\n            return {...data};\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    servers: [],\r\n    inited: false\r\n}\r\n\r\nexport const StoreContext = createContext(initialState);\r\n\r\nexport const StoreProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    useEffect(() => {\r\n        dispatchList.initAllServers()(dispatch)\r\n    }, []);\r\n\r\n  return (<StoreContext.Provider value={{state, dispatch, dispatchList}}>\r\n    {children}\r\n  </StoreContext.Provider>);\r\n}","import React, {useContext} from \"react\";\r\nimport {StoreContext} from \"../_Store\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function ServersStatus(){\r\n    const store = useContext(StoreContext);\r\n\r\n    return (\r\n        <div id=\"serversStatus\">\r\n            <h2>Transport Tycoon Servers List</h2>\r\n            \r\n            <table>\r\n                <tbody>\r\n                <tr><th>Connect</th><th>Players</th><th>Status</th><th>Uptime</th><th>Details</th></tr>\r\n                {store.state.servers.map((server,index)=>{\r\n                    if (server.error) {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{server.ip}<br/><b>{server.name}</b></td>\r\n                                <td>-/-</td><td className=\"offline\">OFFLINE</td>\r\n                                <td></td>\r\n                                <td></td>\r\n                            </tr>\r\n                        );\r\n                    } else if (server.isLoaded === false) {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{server.ip}<br/><b>{server.name}</b></td>\r\n                                <td>-/-</td><td className=\"loading\">Loading</td>\r\n                                <td></td>\r\n                                <td></td>\r\n                            </tr>\r\n                        );\r\n                    } else if (server.playersData === undefined) {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{server.ip}<br/><b>{server.name}</b></td>\r\n                                <td>-/-</td><td className=\"offline\">ERROR</td><td></td>\r\n                                <td></td>\r\n                            </tr>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td><a href ={\"fivem://connect/\" + server.ip} title=\"Connect to the server\">{server.ip}</a><br/><b>{server.name}</b></td>\r\n                                <td>{server.playersData.length}/{server.serverData.limit}</td>\r\n                                <td className=\"online\">ONLINE</td><td>{server.serverData ? server.serverData.uptime : \"-\"}</td>\r\n                                <td><Link to={\"/?serverinfo=\"+(+index+1)} className=\"btn btn-primary\">Players</Link></td>\r\n                            </tr>\r\n                        );\r\n                    }\r\n                })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Total Players Online: {store.state.servers.reduce((acc,server)=>server.isLoaded && server.playersData ? acc + server.playersData.length : acc,0)}</h3>\r\n        </div>\r\n    )\r\n}","import React, {useContext} from \"react\";\r\nimport {StoreContext} from \"../_Store\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function ServerInfo (props) {\r\n    const store = useContext(StoreContext);\r\n    const urlprop = parseInt(props.url[1])\r\n    if(!urlprop || isNaN(urlprop))\r\n        return <h2>URL ERROR</h2>;\r\n\r\n    const server = store.state.servers[urlprop-1];\r\n    if(store.state.inited === false){\r\n        return <h2>Loading</h2>;\r\n    }else if(server === undefined){\r\n        return <h2>SERVER ERROR</h2>;\r\n    }else{\r\n        const header = (\r\n            <div>\r\n            <h2>\r\n                Name: {server.name}<br/>\r\n                IP: <a href ={\"fivem://connect/\" + server.ip}>{server.ip}</a><br/>\r\n                Uptime: {server.serverData ? server.serverData.uptime : \"?\"}<br/>\r\n                Players: {server.playersData ? server.playersData.length : 0}/{server.playersData ? server.serverData.limit : 0}<br/>\r\n                <Link to=\"/?status\" className=\"btn btn-primary\">Back</Link>\r\n            </h2>\r\n            </div>)\r\n\r\n        if(!server.playersData || server.playersData.length === 0){\r\n            return (\r\n                <div id=\"serverInfo\">\r\n                    {header}\r\n                    <h2>No Players</h2>\r\n                </div>\r\n            ) \r\n        }\r\n\r\n        return (\r\n            <div id=\"serverInfo\">\r\n                {header}\r\n                <table>\r\n                    <tbody>\r\n                        <tr><th>Avatar</th><th>#</th><th>Name</th><th>ID</th><th>Job</th></tr>\r\n                        {server.playersData.map((player,index) => (\r\n                        <tr key={index}>\r\n                            <td>\r\n                                {player[3] ? \r\n                                    <a href={player[3]} target=\"_blank\" rel=\"noopener noreferrer\"><img src={player[3] || \"#\"} height=\"50px\" alt=\"img\" className=\"avatar\"/></a> : \r\n                                    <div className=\"no-avatar\"/>}\r\n                            </td>\r\n                            <td>#{index+1}</td>\r\n                            <td><b>{player[0]}</b></td>\r\n                            <td>{player[2]}</td>\r\n                            <td>{player[5] || \"-\"}</td>\r\n                        </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n                <h2>Data received: {new Date(server.lastUpdate).toTimeString()}</h2>\r\n            </div>)\r\n    }\r\n}","import React, {useContext, useState, useEffect} from \"react\";\r\nimport {StoreContext} from \"../_Store\";\r\n\r\nconst showAvatar = false;\r\n\r\nexport default function PlayersList (props) {\r\n    const store = useContext(StoreContext);\r\n    var jobselectURL;\r\n\r\n    if(props.url.length>1){\r\n        // console.log(props.url)\r\n        props.url.forEach(item=>{\r\n            const data = item.split(\":\");\r\n            if(data[0] === \"job\"){\r\n                jobselectURL = decodeURI(data[1]);\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    const [localState, setlocalState] = useState({\r\n        playerFinderMessages: [],\r\n        playerFinderInputField: \"\",\r\n        playerFinderFound: [],\r\n        serverSelect: \"All Servers\",\r\n        jobSelect: jobselectURL || \"All Jobs\"\r\n    });\r\n\r\n    const [jobList,setJobList] = useState([])\r\n\r\n    const handlePlayersNameInput = (input) => {\r\n        const value = input.target.value;\r\n        setlocalState(s => ({...s, playerFinderInputField: value }));\r\n    }\r\n\r\n    const handleServerSelect = (input) => {\r\n        const value = input.target.value;\r\n        setlocalState(s => ({...s, serverSelect: value }));\r\n    }\r\n\r\n    const handleJobSelect = (input) => {\r\n        const value = input.target.value;\r\n        setlocalState(s => ({...s, jobSelect: value }));\r\n    }\r\n\r\n    const _handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            handlePlayerFinderSubmit();\r\n        }\r\n    }\r\n\r\n    const handlePlayerFinderSubmit = (isButton = true) => {\r\n        const input = localState.playerFinderInputField.toLowerCase()\r\n        const playerFinderFound = [];\r\n        store.state.servers.forEach(server=>{\r\n            if(server.playersData === null)return;\r\n            server.playersData.forEach(player=>{\r\n                const playername = (player[0]+\"#\"+player[2]);\r\n                if(playername.toLowerCase().includes(input) && \r\n                    (localState.serverSelect === \"All Servers\" || localState.serverSelect === server.name) &&\r\n                    (localState.jobSelect === \"All Jobs\" || localState.jobSelect === player[5])){\r\n                        playerFinderFound.push([\r\n                            playername,\r\n                            server[\"ip\"],\r\n                            server[\"name\"],\r\n                            player[3],\r\n                            player[5]\r\n                        ])\r\n                    }\r\n            })\r\n        })\r\n\r\n        setlocalState(s=>(\r\n            playerFinderFound.length > 0 ? \r\n                    {   ...s,\r\n                        playerFinderMessages: \"Found \" + playerFinderFound.length + \" player\" +(playerFinderFound.length === 1 ?\"\":\"s\"),\r\n                        playerFinderFound\r\n                    } : {\r\n                        ...s,\r\n                        playerFinderMessages: isButton ? \"Found nothing\" : \"...\",\r\n                        playerFinderFound: []\r\n                    }\r\n            )\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const tempJobsList = []\r\n        store.state.servers.forEach(server=>{\r\n            if(server.playersData){\r\n                server.playersData.forEach(player=>{\r\n                    if(!tempJobsList.includes(player[5])){\r\n                        tempJobsList.push(player[5]);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        setJobList(tempJobsList)\r\n        handlePlayerFinderSubmit(false);\r\n    },[store.state.servers])\r\n  \r\n    return (\r\n        <div id=\"playerFinder\">\r\n            <h2>Online Player Finder</h2>\r\n            <div id=\"form\">\r\n                <form>\r\n                    <input type=\"text\" placeholder=\"Player's name or in-game id\" onChange={(input)=>handlePlayersNameInput(input)} onKeyDown={_handleKeyDown}/>\r\n                    <div>\r\n                        <label htmlFor=\"serverSelector\">Filter Server</label>\r\n                        <select id=\"serverSelector\" onChange={handleServerSelect} value={localState.serverSelect}>\r\n                            <option value=\"All Servers\">All Servers</option>\r\n                            {store.state.servers.map((server,index)=>\r\n                                server.isLoaded ? <option key={index} value={server.name}>{server.name}</option> : \"\")}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"jobSelector\">Filter Job</label>\r\n                        <select id=\"jobSelector\" onChange={(input)=>handleJobSelect(input)} value={localState.jobSelect}> \r\n                            <option value=\"All Jobs\">All Jobs</option>\r\n                            {jobList.map((job,index)=>\r\n                                <option key={index} value={job}>{job}</option>)}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <input type=\"button\" value=\"search\" onClick={()=>handlePlayerFinderSubmit()}/>\r\n                </form>\r\n            </div>\r\n\r\n            <h2>\r\n                {localState.playerFinderMessages}\r\n            </h2>\r\n\r\n            {!localState.playerFinderFound ? \"\" :\r\n            (<table>\r\n                <tbody>\r\n                    {localState.playerFinderFound.map((player,index)=>\r\n                    \r\n                        <tr key={index}>\r\n                            <td>{player[3] && showAvatar === true ? //todo \r\n                                <a href={player[3]} target=\"_blank\" rel=\"noopener noreferrer\"><img src={player[3] || \"#\"} height=\"50px\" alt=\"img\" className=\"avatar\"/></a> : \r\n                                <div className=\"no-avatar\"/>\r\n                            }</td>\r\n                            <td>#{index+1}</td>\r\n                            <td><b>{player[0]}</b></td>\r\n                            <td>{player[4] || \"-\"}</td>\r\n                            <td><a href ={\"fivem://connect/\" + player[1]} title=\"connect\">{player[1]}</a><br/><b>{player[2]}</b></td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>)\r\n            }\r\n            <h3>Total Players Online: {store.state.servers.reduce((acc,server)=>server.isLoaded && server.playersData ? acc + server.playersData.length : acc,0)}</h3>\r\n    </div>\r\n    )\r\n}","import React, {useContext, useEffect, useState, useRef} from \"react\";\r\nimport {StoreContext} from \"../_Store\";\r\nimport Chart from \"chart.js\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst colorArray = [\r\n    \"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\"#ADD8E6\",\"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\r\n    \"#ADD8E6\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\"#ADD8E6\",\"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\r\n    \"#ADD8E6\"\r\n];\r\n\r\nexport default function JobsStats () {\r\n    const [state, setState] = useState({entries: [], counter: 0});\r\n    const [state2, setState2] = useState({entries: [], counter: 0});\r\n    const store = useContext(StoreContext);\r\n    const chartRef = useRef();\r\n    \r\n    useEffect(() => {\r\n        if(store.state.inited && store.state.servers.reduce((acc,server)=>server.isLoaded === true ? acc + 1 : acc,0) === store.state.servers.length){\r\n            const jobs = {}\r\n\r\n            const companyjobs = {\r\n                \"COCO\": 0,\r\n                \"PIGS\": 0,\r\n                \"RTS\": 0,\r\n                \"BAT\": 0,\r\n                \"FRLLC\": 0,\r\n                \"IA\": 0\r\n            }\r\n\r\n            store.state.servers.forEach(server=>{\r\n                if(server.isLoaded === true && server.playersData !== null){\r\n                    server.playersData.forEach(player=>{\r\n                        if(jobs[player[5]] === undefined){\r\n                            jobs[player[5]] = 1;\r\n                        }else{\r\n                            jobs[player[5]]++;\r\n                        }\r\n\r\n                        if(player[5].startsWith(\"P.I.G.S.\")){\r\n                            companyjobs[\"PIGS\"]++;\r\n                        }else if(player[5].startsWith(\"R.T.S.\")){\r\n                            companyjobs[\"RTS\"]++;\r\n                        }else if(player[5].startsWith(\"CollinsCo\")){\r\n                            companyjobs[\"COCO\"]++;\r\n                        }else if(player[5].startsWith(\"IA \")){\r\n                            companyjobs[\"IA\"]++;\r\n                        }else if(player[5].startsWith(\"BAT\")){\r\n                            companyjobs[\"BAT\"]++;\r\n                        }else if(player[5].startsWith(\"FRLLC\")){\r\n                            companyjobs[\"FRLLC\"]++;\r\n                        }\r\n\r\n                    })\r\n                }\r\n            })\r\n            const sortedEntries = (Object.entries(jobs).sort((item1,item2)=>item2[1]-item1[1]));\r\n            const sortedEntriesCompany = (Object.entries(companyjobs).sort((item1,item2)=>item2[1]-item1[1]));\r\n            setState(s => ({\r\n                ...s,\r\n                entries: sortedEntries,\r\n                counter: (sortedEntries.reduce((acc,val)=>acc+val[1],0))\r\n            }))\r\n            setState2(s => ({\r\n                ...s,\r\n                entries: sortedEntriesCompany,\r\n                counter: (sortedEntriesCompany.reduce((acc,val)=>acc+val[1],0))\r\n            }))\r\n        }\r\n    }, [store.state.servers]); \r\n\r\n    useEffect(()=>{\r\n        if(chartRef && chartRef.current){\r\n            const current = chartRef.current.getContext(\"2d\");\r\n            const instance = new Chart(current, {\r\n                type: 'pie',\r\n                data: {\r\n                labels: state.entries.map(item=>item[0]),\r\n                datasets: [{\r\n                    data: state.entries.map(item=>item[1]),\r\n                    backgroundColor: colorArray,\r\n                    borderWidth: 0\r\n                }]\r\n                },\r\n                options: {\r\n                    legend: {\r\n                        display: false\r\n                    },\r\n                    responsive: true,\r\n            \r\n                    tooltips: {\r\n                        callbacks: {\r\n                                label: (tooltipItem, data) => {\r\n                                const dataset = data.datasets[tooltipItem.datasetIndex];\r\n                                const total = dataset.data.reduce((previousValue, currentValue)=> previousValue + currentValue);\r\n            \r\n                                const currentValue = dataset.data[tooltipItem.index];\r\n                                const percentage = Math.floor(((currentValue/total) * 100)+0.5);\r\n                                return `${data.labels[tooltipItem.index]} - ${currentValue} players (${percentage}%)`;\r\n                                }\r\n                            }\r\n                        } \r\n                }});\r\n            return () => instance.destroy();\r\n        }\r\n    },[state]);\r\n\r\n    return (\r\n        <div id=\"jobsStats\">\r\n            <h2>Top Jobs Now</h2>\r\n            {state.entries.length === 0 ? <div>Loading...</div> : \r\n                <table>\r\n                    <tbody>\r\n                    <tr><th>%</th><th>Job Name</th><th>Active</th><th>Links</th></tr>\r\n                    {state.entries.map((job,index)=>{\r\n                        return <tr key={index}><td>{Number(job[1]/state.counter*100).toFixed(1)}%</td><td>{job[0]}</td><td>{job[1]}</td><td><Link to={encodeURI(\"/?playerfinder=job:\" + job[0])}>Players</Link></td></tr>\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n            \r\n            <div id=\"split\"/>\r\n            <h2>Top Company Jobs Now</h2>\r\n\r\n            {state2.entries.length === 0 ? <div>Loading...</div> : \r\n                <table>\r\n                    <tbody>\r\n                    <tr><th>%</th><th>Job Name</th><th>Active</th></tr>\r\n                    {state2.entries.map((job,index)=>{\r\n                        return <tr key={index}><td>{Number(job[1]/state2.counter*100).toFixed(1)}%</td><td>{job[0]}</td><td>{job[1]}</td></tr>\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n\r\n            <div id=\"split\"/>\r\n\r\n            <div>\r\n                <canvas id=\"myChart\" ref={chartRef}></canvas>\r\n            </div>\r\n\r\n            <h3>Total Players Online: {store.state.servers.reduce((acc,server)=>server.isLoaded && server.playersData ? acc + server.playersData.length : acc,0)}</h3>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext, useEffect} from \"react\";\r\nimport {StoreContext} from \"../_Store\";\r\n\r\nexport default function VehicleStats(){\r\n    const store = useContext(StoreContext);\r\n\r\n    useEffect(()=>{\r\n        if(!store.state.inited) return;\r\n\r\n        store.state.servers.forEach((server,index) => {\r\n            if(server.isLoaded && !server.error && !server.vehicleData){\r\n                store.dispatchList.fetchDetailedServer(server,index)(store.dispatch)\r\n            }\r\n        });\r\n    },[store.state.inited, store.state.servers, store.dispatchList, store.dispatch])\r\n\r\n    const list = {};\r\n    let totalCounter = 0;\r\n    store.state.servers.forEach((server,index)=>{\r\n        if(!server.vehicleData)return;\r\n\r\n        server.vehicleData.forEach(vehicle=>{\r\n            if(list[vehicle.vehicle_model] === undefined){\r\n                list[vehicle.vehicle_model] = {\r\n                    counter: 1, \r\n                    vehicle_name: vehicle.vehicle_name\r\n                };\r\n                totalCounter++;\r\n            }else{\r\n                list[vehicle.vehicle_model].counter++;\r\n                totalCounter++;\r\n            }\r\n\r\n        })\r\n    })\r\n    \r\n    return (\r\n        <div id=\"carsStats\">\r\n            <h2>Top Vehicles Now</h2>\r\n            <table>\r\n                <tbody>\r\n                {list.length === 0 ?  <tr><td>N/A</td></tr> :\r\n                <>\r\n                    <tr><th>%</th><th>Name</th><th>Active</th></tr>\r\n                    {Object.values(list)\r\n                        .sort((a,b) => b.counter - a.counter)\r\n                        .map((vehicle,index)=>\r\n                            <tr key={index}>\r\n                                <td>{Number(vehicle.counter/totalCounter*100).toFixed(2)}%</td>\r\n                                <td>{vehicle.vehicle_name === \"None\" ? \"None, On Foot\" : vehicle.vehicle_name}</td>\r\n                                <td>{vehicle.counter}</td>\r\n                            </tr>)}\r\n                </>\r\n                }\r\n                </tbody>\r\n            </table>\r\n            <h3>Total Players Online: {store.state.servers.reduce((acc,server)=>server.isLoaded && server.playersData ? acc + server.playersData.length : acc,0)}</h3>\r\n        </div>\r\n    )\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {StoreContext} from \"../_Store\";\r\nimport {initAllServers} from \"../_Dispatch\";\r\n\r\nexport default function Timer (){\r\n    const [state, setState] = useState({total: 0, online: 0});\r\n    const store = useContext(StoreContext);\r\n    \r\n    function handleOnClickRefresh(){\r\n        initAllServers()(store.dispatch)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState(s => ({\r\n            ...s,\r\n            total: store.state.servers.length,\r\n            online: store.state.servers.reduce((acc,server)=>server.isLoaded === true && server.serverData ? acc + 1 : acc ,0),\r\n        }));\r\n\r\n    },[store.state.servers]);\r\n\r\n    return (\r\n        <h3>\r\n        Server data is loaded from {state.online} out of {state.total} servers <input type=\"button\" value=\"refresh all servers\" className=\"btn2 refresh\" onClick={handleOnClickRefresh}/>\r\n        </h3>\r\n    )\r\n}","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./Style.scss\";\n\nReactDOM.render(<App />, document.getElementById('root'));","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport ServersStatus from \"./components/ServersStatus\";\r\nimport ServerInfo from \"./components/ServerInfo\";\r\nimport PlayerFinder from \"./components/PlayerFinder\";\r\nimport JobsStats from \"./components/JobsStats\";\r\nimport VehicleStats from \"./components/VehicleStats\";\r\nimport Footer from \"./components/Footer\";\r\nimport {StoreProvider} from './_Store';\r\n\r\n\r\nexport default function App() {\r\n  React.useEffect(()=>{\r\n    document.title = \"ttstats.aca.lt\";\r\n  },[])\r\n\r\n  return (\r\n    <Router basename=\"/\">\r\n    {/* <Router basename=\"ttstats\"> */}\r\n      <StoreProvider>\r\n        <div id=\"header\">\r\n          <ul>\r\n            <li><Link to=\"/\">Servers Status</Link></li>\r\n            <li><Link to=\"?playerfinder\">Player Finder</Link></li>\r\n            <li><Link to=\"?vehicles\">Vehicle Stats</Link></li>\r\n            <li><Link to=\"?jobs\">Job Stats</Link></li>\r\n            <li><a href=\"http://ttmap.online\" className=\"gold\">ttmap.online</a></li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div id=\"content\">\r\n          <Route component={\r\n            (props)=>{\r\n              const url = props.location.search.split(\"=\");\r\n              switch(url[0]){\r\n                case (\"?status\"):\r\n                  return <ServersStatus/>;\r\n                case (\"?serverinfo\"):\r\n                  return <ServerInfo url={url}/>;\r\n                case (\"?jobs\"):\r\n                  return <JobsStats/>;\r\n                case (\"?vehicles\"):\r\n                  return <VehicleStats/>;\r\n                case (\"?playerfinder\"):\r\n                  return <PlayerFinder url={url}/>;\r\n                default:\r\n                  return <ServersStatus/>;\r\n              }\r\n            }}/>\r\n        </div>\r\n\r\n        <div id=\"footer\">\r\n          <Footer/>\r\n        </div>\r\n      </StoreProvider>\r\n    </Router>\r\n  );\r\n}\r\n"],"sourceRoot":""}
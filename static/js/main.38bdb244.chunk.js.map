{"version":3,"sources":["_Dispatch.js","_Store.js","ServersStatus.js","ServerDetails.js","PlayersFinder.js","JobsStats.js","Timer.js","serviceWorker.js","index.js","App.js"],"names":["fetchServer","server","index","dispatch","promise","fetch","then","res","json","Promise","resolve","reject","setTimeout","Error","type","data","isLoaded","playersData","players","serverData","lastUpdate","Date","now","error","catch","reducer","action","servers","push","map","inited","tempArray","slice","splice","name","value","initialState","StoreContext","createContext","StoreProvider","children","useReducer","state","useEffect","serversListJSON","forEach","dispatches","Provider","ServersStatus","store","useContext","id","key","ip","style","color","undefined","href","title","length","limit","uptime","to","className","reduce","acc","PlayersList","props","url","isNaN","header","player","target","rel","src","height","alt","toTimeString","useState","playerFinderMessages","playerFinderInputField","playerFinderFound","serverSelect","jobSelect","jobsList","localState","setlocalState","handlePlayerFinderSubmit","input","toLocaleLowerCase","playername","toLowerCase","includes","list","getAllJobs","placeholder","onChange","handlePlayersNameInput","onKeyDown","e","preventDefault","htmlFor","job","onClick","JobsStats","entries","counter","setState","React","createRef","console","log","jobs","jobName","sortedEntries","Object","sort","item1","item2","val","Math","floor","Timer","interval","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","basename","component","search","split","parseInt","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38bdb244.chunk.js","sourcesContent":["import serversListJSON from \"./json/serversList.json\";\r\n// import serversListJSON from \"./serversListEmpty.json\";\r\n\r\nconst timeout = (promise) => new Promise(function(resolve, reject) {\r\n    setTimeout(() => reject(new Error(\"timeout\")), 2000)\r\n    promise.then(resolve, reject)\r\n})\r\n\r\nexport const initAllServers = () => dispatch => {\r\n    serversListJSON.forEach((server,index) => {\r\n        dispatch({\r\n            type: \"ADDSERVER\",\r\n            data: {\r\n                \"error\": null,\r\n                \"isLoaded\": false,\r\n                \"ip\": server[0],\r\n                \"name\": server[1],\r\n                \"playersData\": null,\r\n                \"serverData\": null,\r\n                \"lastUpdate\": null\r\n            },\r\n            index\r\n        })\r\n        fetchServer(server,index)(dispatch);\r\n    });\r\n\r\n    dispatch({type: \"SERVERSINITED\"})\r\n};\r\n\r\n\r\n// const fetchServer = (server,index) => {\r\nexport const fetchServer = (server,index) => dispatch => {\r\n    timeout(\r\n        //https://cors-anywhere.herokuapp.com/\r\n        // fetch(\"http://\"+server[0]+\"/status/widget/players.json\")\r\n        fetch(\"https://cors-anywhere.herokuapp.com/http://\"+server[0]+\"/status/widget/players.json\")\r\n        .then(res => res.json())\r\n        ).then(\r\n        (res) => \r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    isLoaded: true,\r\n                    playersData: res.players,\r\n                    serverData: res.server,\r\n                    lastUpdate: Date.now()\r\n                },\r\n                index\r\n            }),\r\n        () => {\r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    isLoaded: true,\r\n                    error: true,\r\n                    lastUpdate: Date.now()\r\n                },\r\n                index\r\n            })\r\n        }\r\n    ).catch(() => {\r\n        dispatch({\r\n            type: \"UPDATESERVER\",\r\n            data: {\r\n                isLoaded: true,\r\n                error: true,\r\n                lastUpdate: Date.now()\r\n            },\r\n            index\r\n        })\r\n})}","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport * as dispatches from \"./_Dispatch.js\"\r\n\r\n\r\nconst reducer = (data, action) => {\r\n    switch(action.type){\r\n        case (\"SET\"):\r\n            return {\r\n                ...data,\r\n                ...action.data\r\n            }\r\n        case (\"PUSH\"):\r\n            if(data.servers) data.servers.push(action.data)\r\n            else data.servers = [action.data];\r\n            return {...data};\r\n        case (\"UPDATESERVER\"):\r\n            data.servers = data.servers.map((data, index) => index !== action.index ? data : {\r\n                  ...data,\r\n                  ...action.data\r\n                });\r\n            return {...data};\r\n        case (\"SERVERSINITED\"):\r\n            return {...data, inited: true};\r\n        case (\"ADDSERVER\"):\r\n            // if(!data.servers) data.servers = [];\r\n            const tempArray = data.servers.slice()\r\n            tempArray.splice(action.index, 0, action.data)\r\n            data.servers = tempArray;\r\n            return {...data}\r\n        case (\"SETKEY\"):\r\n            data[action.data.name] = action.data.value;\r\n            return {...data};\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\n\r\nconst initialState = {\r\n    servers: [],\r\n    inited: false\r\n}\r\n\r\nexport const StoreContext = createContext(initialState);\r\n\r\nexport const StoreProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n//   dispatch({type:\"ADDSERVER\",data:{\"kebab\":\"potato\"}})\r\n//   dispatches.initAllServers()(dispatch)\r\n    // dispatches.initAllServers();\r\n    useEffect(() => {\r\n        dispatches.initAllServers()(dispatch)\r\n      }, []);\r\n\r\n  return (<StoreContext.Provider value={{\r\n    // servers: state.servers\r\n    state\r\n    }}>\r\n    {children}\r\n  </StoreContext.Provider>);\r\n}\r\n\r\n// const store = createStore(\r\n//     reducer,\r\n//     {\r\n//         servers: [],\r\n//         inited: false\r\n//     },\r\n// //   compose(\r\n// //     applyMiddleware(...[thunk]),\r\n// //     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n// //   )\r\n// );\r\n\r\n","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {StoreContext} from \"./_Store\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport default function ServersStatus(){\r\n    const store = useContext(StoreContext);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Transport Tycoon Servers List</h2>\r\n            \r\n            <table id=\"serversList\">\r\n                <tbody>\r\n                <tr><th>Connect</th><th>Players</th><th>Status</th><th>Uptime</th><th>Details</th></tr>\r\n                {store.state.servers.map((server,index)=>{\r\n                    if (server.error) {\r\n                        return (\r\n                            <tr key={index}><td>{server.ip}<br/><b>{server.name}</b></td><td>-/-</td><td style={{color: \"red\"}}>OFFLINE</td><td></td><td></td></tr>\r\n                        );\r\n\r\n                    } else if (server.isLoaded === false) {\r\n\r\n                        return (\r\n                            <tr key={index}><td>{server.ip}<br/><b>{server.name}</b></td><td>-/-</td><td style={{color: \"grey\"}}>Loading</td><td></td><td></td></tr>\r\n                        );\r\n                    \r\n                    } else if (server.playersData === undefined) {\r\n                        return (\r\n                            <tr key={index}><td>{server.ip}<br/><b>{server.name}</b></td><td>-/-</td><td style={{color: \"red\"}}>ERROR</td><td></td><td></td></tr>\r\n                        );\r\n\r\n                    } else {\r\n                        return (\r\n                            <tr key={index}><td><a href ={\"fivem://connect/\" + server.ip} title=\"connect\">{server.ip}</a><br/><b>{server.name}</b></td><td>{server.playersData.length}/{server.serverData.limit}</td><td style={{color: \"green\"}}>ONLINE</td><td>{server.serverData ? server.serverData.uptime : \"-\"}</td><td><Link to={\"/?serverinfo=\"+(+index+1)} className=\"btn btn-primary\">Players</Link></td></tr>\r\n                        );\r\n                    }\r\n                })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Total Players Online: {store.state.servers.reduce((acc,server)=>server.isLoaded && server.playersData ? acc + server.playersData.length : acc,0)}</h3>\r\n        </div>\r\n    )\r\n\r\n\r\n    \r\n}","import React, {useContext} from \"react\";\r\nimport {StoreContext} from \"./_Store\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function PlayersList (props) {\r\n    const store = useContext(StoreContext);\r\n\r\n    if(!props.url || isNaN(props.url))\r\n        return <div><h2>URL ERROR</h2></div>;\r\n\r\n    const server = store.state.servers[props.url-1];\r\n    if(store.state.inited === false){\r\n        return <div><h2>Loading</h2></div>;\r\n    }else if(server === undefined){\r\n        return <div><h2>SERVER ERROR</h2></div>;\r\n    }else{\r\n        const header = (\r\n            <div>\r\n            <h2>\r\n                Players List On {server.name}<br/>\r\n                IP: <a href ={\"fivem://connect/\" + server.ip}>{server.ip}</a><br/>\r\n                Uptime: {server.serverData ? server.serverData.uptime : \"?\"}<br/>\r\n                <Link to=\"/?status\" className=\"btn btn-primary\">Back</Link>\r\n            </h2>\r\n            </div>)\r\n\r\n        if(!server.playersData || server.playersData.length === 0){\r\n            return (\r\n                <div>\r\n                {header}\r\n                <h2>No Players</h2>\r\n                </div>\r\n            ) \r\n        }\r\n\r\n        return (\r\n            <div>\r\n            {header}\r\n            \r\n            <table id=\"playersList\">\r\n            <tbody>\r\n                <tr><th>Avatar</th><th>#</th><th>Name</th><th>ID</th><th>Job</th></tr>\r\n                {server.playersData.map((player,index) => (\r\n                <tr key={index}>\r\n                    <td>{player[3] ? \r\n                        <a href={player[3]} target=\"_blank\" rel=\"noopener noreferrer\"><img src={player[3] || \"#\"} height=\"50px\" alt=\"img\" className=\"avatar\"/></a> : \r\n                        <div className=\"no-avatar\"/>\r\n                    }</td>\r\n                    <td>#{index+1}</td>\r\n                    <td><b>{player[0]}</b></td>\r\n                    <td>{player[2]}</td>\r\n                    <td>{player[5] || \"-\"}</td>\r\n                </tr>\r\n                ))}\r\n\r\n            </tbody>\r\n            </table>\r\n            <h3>Updated on {new Date(server.lastUpdate).toTimeString()}</h3>\r\n            </div>)\r\n\r\n\r\n    }\r\n}","import React, {useContext, useState, useEffect} from \"react\";\r\nimport {StoreContext} from \"./_Store\";\r\n\r\n\r\nexport default function PlayersList (props) {\r\n    const store = useContext(StoreContext); \r\n\r\n    const [localState, setlocalState] = useState({\r\n        playerFinderMessages: [],\r\n        playerFinderInputField: \"\",\r\n        playerFinderFound: [],\r\n        serverSelect: \"All Servers\",\r\n        jobSelect: \"All Jobs\",\r\n        jobsList: []\r\n    });\r\n\r\n    const handlePlayersNameInput = (input) => {\r\n        setlocalState({...localState, playerFinderInputField: input.target.value });\r\n    }\r\n\r\n    const handleServerSelect = (input) => {\r\n        setlocalState({...localState, serverSelect: input.target.value });\r\n    }\r\n\r\n    const handleJobSelect = (input) => {\r\n        setlocalState({...localState, jobSelect: input.target.value });\r\n    }\r\n\r\n    const _handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            handlePlayerFinderSubmit();\r\n        }\r\n    }\r\n\r\n    const handlePlayerFinderSubmit = () => {\r\n        // if(!localState.playerFinderInputField || localState.playerFinderInputField.length < 1)\r\n        //     return setlocalState({...localState, playerFinderMessages: \"Invalid name or in-game id\"});\r\n        const input = localState.playerFinderInputField.toLocaleLowerCase()\r\n        const playerFinderFound = [];\r\n        store.state.servers.forEach(server=>{\r\n            if(server.playersData === null)return;\r\n            server.playersData.forEach(player=>{\r\n            const playername = (player[0]+\"#\"+player[2]);\r\n            if(playername.toLowerCase().includes(input) && \r\n                    (localState.serverSelect === \"All Servers\" || localState.serverSelect === server.name) &&\r\n                    (localState.jobSelect === \"All Jobs\" || localState.jobSelect === player[5]))\r\n                playerFinderFound.push([\r\n                            playername,\r\n                            server[\"ip\"],\r\n                            server[\"name\"],\r\n                            player[3],\r\n                            player[5]\r\n                        ])})\r\n        })\r\n        if(playerFinderFound.length > 0){\r\n            setlocalState({\r\n                ...localState,\r\n                playerFinderMessages: \"Found \" + playerFinderFound.length + \" player\" +(playerFinderFound.length === 1 ?\"\":\"s\"),\r\n                playerFinderFound\r\n            });\r\n        }else{\r\n            setlocalState({\r\n                ...localState,\r\n                playerFinderMessages: \"Found nothing\",\r\n                playerFinderFound: []\r\n            });\r\n        }\r\n    }\r\n\r\n    const getAllJobs = () => {\r\n        const list = [];\r\n        store.state.servers.forEach(server=>{\r\n            if(server.isLoaded === true && server.playersData){\r\n                server.playersData.forEach(player=>{\r\n                    if(!list.includes(player[5]))\r\n                        list.push(player[5])\r\n                })\r\n            }\r\n        })\r\n        setlocalState({...localState,jobsList:list})\r\n    }\r\n\r\n    useEffect(()=>{\r\n        handlePlayerFinderSubmit();\r\n        getAllJobs();\r\n    },[store.state.servers])\r\n\r\n  \r\n    return (\r\n        <div id=\"playerFinder\">\r\n        <h2>Online Players Finder</h2>\r\n\r\n        <form>\r\n            <input type=\"text\" placeholder=\"Player's name or in-game id\" onChange={(input)=>handlePlayersNameInput(input)} onKeyDown={_handleKeyDown}/><br/>\r\n            \r\n\r\n            <label htmlFor=\"serverSelector\">Filter Server: </label>\r\n            <select id=\"serverSelector\" onChange={handleServerSelect}>\r\n                <option value=\"All Servers\">All Servers</option>\r\n                {store.state.servers.map((server,index)=>{\r\n                    return server.isLoaded?<option key={index} value={server.name}>{server.name}</option>:\"\"\r\n                })}\r\n            </select><br/>\r\n\r\n            <label htmlFor=\"jobSelector\">Filter Job: </label>\r\n            <select id=\"jobSelector\" onChange={handleJobSelect}>\r\n                <option value=\"All Jobs\">All Jobs</option>\r\n                {localState.jobsList.map((job,index)=>{\r\n                    return <option key={index} value={job}>{job}</option>\r\n                })}\r\n            </select><br/>\r\n            <input type=\"button\" value=\"search\" onClick={()=>handlePlayerFinderSubmit()}/>\r\n        </form>\r\n\r\n\r\n\r\n        <div>\r\n        <p>\r\n            {localState.playerFinderMessages}\r\n        </p>\r\n        <table id=\"playersFound\">\r\n            <tbody>\r\n            {!localState.playerFinderFound ? \"\" :\r\n                localState.playerFinderFound.map((player,index)=>\r\n                \r\n                <tr key={index}>\r\n                    <td>{player[3] ? \r\n                        <a href={player[3]} target=\"_blank\" rel=\"noopener noreferrer\"><img src={player[3] || \"#\"} height=\"50px\" alt=\"img\" className=\"avatar\"/></a> : \r\n                        <div className=\"no-avatar\"/>\r\n                    }</td>\r\n                    <td>#{index+1}</td>\r\n                    <td><b>{player[0]}</b></td>\r\n                    <td>{player[4] || \"-\"}</td>\r\n                    <td><a href ={\"fivem://connect/\" + player[1]} title=\"connect\">{player[1]}</a><br/><b>{player[2]}</b></td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {StoreContext} from \"./_Store\";\r\nimport Chart from \"chart.js\";\r\n\r\nexport default function JobsStats () {\r\n    const [state, setState] = useState({entries: [], counter: 0});\r\n    const store = useContext(StoreContext);\r\n    const chartRef = React.createRef();\r\n    const colorArray = [\r\n        \"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\"#ADD8E6\",\"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\r\n        \"#ADD8E6\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\"#ADD8E6\",\"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\r\n        \"#ADD8E6\"\r\n    ];\r\n    \r\n    useEffect(() => {\r\n        if(store.state.servers.reduce((acc,server)=>server.isLoaded === true ? acc + 1 : acc,0) === store.state.servers.length){\r\n            console.log(\"done\")\r\n        const jobs = {}\r\n        store.state.servers.forEach(server=>{\r\n            if(server.isLoaded === true && server.playersData !== null){\r\n                server.playersData.forEach(player=>{\r\n                    const jobName = (player[5] === \"\" ? \"Unemployed\" : player[5]);\r\n                    if(jobs[jobName] === undefined){\r\n                        jobs[jobName] = 1;\r\n                    }else{\r\n                        jobs[jobName]++;\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        const sortedEntries = (Object.entries(jobs).sort((item1,item2)=>item2[1]-item1[1]));\r\n        setState({\r\n            ...state,\r\n            entries: sortedEntries,\r\n            counter: (sortedEntries.reduce((acc,val)=>acc+val[1],0))\r\n        })\r\n    }}, [store.state.servers]); \r\n\r\n    if(state.entries.length === 0){\r\n        return <div>Loading</div>\r\n    }\r\n    return (\r\n        <div>\r\n            {console.log(\"rendering\")}\r\n        {state.counter}\r\n        <table className=\"jobstatstable\">\r\n            <tbody>\r\n            <tr><th>%</th><th>Job Name</th><th>Active</th></tr>\r\n            {state.entries.map((job,index)=>{\r\n                return <tr key={index}><td>{Math.floor(((job[1]/state.counter) * 100)+0.5)}%</td><td>{job[0]}</td><td>{job[1]}</td></tr>\r\n            })}\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n    \r\n        // for (let i = 0; i < data.length; i++) {\r\n        //     table.innerHTML+=`<tr><td></td><td class=\"mid\">${data[i][0]}</th><td style=\"right\">${(data[i][1]===1?data[i][1]+\" player\":data[i][1]+\" players\")}</td></tr>`;\r\n        // }\r\n    )\r\n\r\n\r\n        \r\n\r\n\r\n    \r\n\r\n        // const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        // const finalList = [];\r\n        // new Chart(myChartRef, {\r\n        //     type: 'pie',\r\n        //     data: {\r\n        //     labels: finalList.map(item=>item[0]),\r\n        //     datasets: [{\r\n        //         data: finalList.map(item=>item[1]),\r\n        //         backgroundColor: colorArray,\r\n        //         borderWidth: 0\r\n        //     }]\r\n        //     },\r\n        //     options: {\r\n        //         legend: {\r\n        //             display: false\r\n        //         },\r\n        //         responsive: true,\r\n        \r\n        \r\n        //         tooltips: {\r\n        //             callbacks: {\r\n        //                     label: function(tooltipItem, data) {\r\n                                \r\n        //                     const dataset = data.datasets[tooltipItem.datasetIndex];\r\n                            \r\n        //                     const total = dataset.data.reduce(function(previousValue, currentValue, currentIndex, array) {\r\n        //                         return previousValue + currentValue;\r\n        //                     });\r\n        \r\n        //                     const currentValue = dataset.data[tooltipItem.index];\r\n        //                     const percentage = Math.floor(((currentValue/total) * 100)+0.5);\r\n        //                     return `${data.labels[tooltipItem.index]} - ${currentValue} players (${percentage}%)`;\r\n        \r\n        //                     }\r\n        //                 }\r\n        //             } \r\n                            \r\n        //     }\r\n        //     });\r\n\r\n\r\n\r\n        // new Chart(myChartRef, {\r\n        //     type: \"line\",\r\n        //     data: {\r\n        //         //Bring in data\r\n        //         labels: [\"Jan\", \"Feb\", \"March\",\"AA\",\"Tee\"],\r\n        //         datasets: [\r\n        //             {\r\n        //                 label: \"Sales\",\r\n        //                 data: [86, 67, 91,66,55,66],\r\n        //             },\r\n        //             {\r\n        //                 label: \"Kaput\",\r\n        //                 data: [11, 2, 33,66,55,66],\r\n        //             }\r\n        //         ]\r\n        //     },\r\n        //     options: {\r\n        //         //Customize chart options\r\n        //     }\r\n        // });\r\n    // }\r\n    // render() {\r\n    //     return (\r\n    //         <div>\r\n    //             <canvas\r\n    //                 id=\"myChart\"\r\n    //                 ref={this.chartRef}\r\n    //             />\r\n    //         </div>\r\n    //     )\r\n    // }\r\n}\r\n\r\n\r\n// import React, {useContext, useEffect, useState} from \"react\";\r\n// import {StoreContext} from \"./_Store\";\r\n// import \"./Chart.min.css\";\r\n\r\n// export default function JobStats (props) {\r\n//     const store = useContext(StoreContext);\r\n//     const [state, setState] = useState(true); //script loaded\r\n//     useEffect(()=>{\r\n//         const script = document.createElement(\"style\");\r\n//         script.src = \"/Chart.min.js\";\r\n//         script.async = true;\r\n//         script.onload = () => setState(true);\r\n      \r\n//         document.body.appendChild(script);\r\n//     },[])\r\n\r\n//     if(state === false){\r\n//         return <div>Loading</div>\r\n//     }else{\r\n//         return <div>Rendered</div>\r\n//     }\r\n\r\n// }","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {StoreContext} from \"./_Store\";\r\n\r\nexport default function Timer (){\r\n    const [state, setState] = useState(true);\r\n    const store = useContext(StoreContext);\r\n    const time = Date.now()\r\n    let lastUpdate = 0;\r\n    \r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setState(!state);console.log(\"test\")\r\n        }, 5000);\r\n    \r\n        return () => clearInterval(interval);\r\n    });\r\n    \r\n\r\n\r\n\r\n    return (<div>TIMERRRR {lastUpdate}</div>)\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport ServersStatus from \"./ServersStatus\";\r\nimport ServerDetails from \"./ServerDetails\";\r\nimport PlayersFinder from \"./PlayersFinder\";\r\nimport JobsStats from \"./JobsStats\";\r\nimport Timer from \"./Timer\";\r\nimport {StoreProvider} from './_Store';\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router basename=\"ttstats\">\r\n      <StoreProvider>\r\n      \r\n      <header>\r\n        <ul>\r\n          <li><Link to=\"/\">Servers Status</Link></li>\r\n          <li><Link to=\"?playersfinder\">Players Finder</Link></li>\r\n          <li><Link to=\"?player\">N/A</Link></li>\r\n          <li><Link to=\"?jobs\">Jobs Stats</Link></li>\r\n        </ul>\r\n      </header>\r\n\r\n      <main>\r\n        <Route component={\r\n          (props)=>{\r\n            const url = props.location.search.split(\"=\");\r\n            switch(url[0]){\r\n              case (\"?status\"):\r\n                // return <div>test</div>\r\n                return <ServersStatus/>;\r\n              case (\"?serverinfo\"):\r\n                  return <ServerDetails url={parseInt(url[1])}/>;\r\n              case (\"?player\"):\r\n                return <div>player</div>;\r\n              case (\"?jobs\"):\r\n                return <JobsStats/>;\r\n              case (\"?playersfinder\"):\r\n                return <PlayersFinder/>;\r\n              default:\r\n                return <Redirect to=\"/?status\"/>;\r\n            }\r\n          }}/>\r\n      </main>\r\n      <footer>\r\n        <Timer/>\r\n      </footer>\r\n      </StoreProvider>\r\n    </Router>\r\n  );\r\n}\r\n"],"sourceRoot":""}
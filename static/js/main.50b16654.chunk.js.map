{"version":3,"sources":["fetchdata.js","store.js","components/DxpClock.js","components/ServersStatus.js","components/ServerInfo.js","components/PlayerFinder.js","components/JobsStats.js","components/VehicleStats.js","components/Footer.js","components/App.js","index.js"],"names":["timeout","promise","Promise","resolve","reject","setTimeout","Error","then","initAllServers","dispatch","type","servers_list","forEach","server","index","data","fetchServer","fetch","res","json","players","player","isLoaded","playersData","serverData","lastUpdate","Date","now","error","catch","fetchDetailedServer","ip","vehicleData","map","err","console","log","reducer","action","tempArray","servers","slice","splice","inited","initialState","StoreContext","createContext","StoreProvider","children","useReducer","state","useEffect","dispatch_list","Provider","value","DxpClock","dxp","timestamp","useState","parseInt","time","setTime","interval","setInterval","t","clearInterval","HH","Math","floor","divisor_for_minutes","MM","SS","ceil","className","onClick","alert","Number","toFixed","dxpalert","ServersStatus","store","useContext","id","undefined","key","name","isDxpActive","href","title","length","limit","uptime","to","reduce","acc","ServerInfo","props","urlprop","url","isNaN","target","rel","src","height","alt","toTimeString","PlayersList","jobselectURL","item","split","decodeURI","playerFinderMessages","playerFinderInputField","playerFinderFound","serverSelect","jobSelect","localState","setlocalState","jobList","setJobList","handlePlayerFinderSubmit","isButton","input","toLowerCase","playername","includes","push","s","tempJobsList","placeholder","onChange","handlePlayersNameInput","onKeyDown","e","preventDefault","htmlFor","handleJobSelect","job","colorArray","JobsStats","entries","counter","setState","state2","setState2","chartRef","useRef","jobs","companyjobs","startsWith","sortedEntries","Object","sort","item1","item2","sortedEntriesCompany","val","current","getContext","instance","Chart","labels","datasets","backgroundColor","borderWidth","options","legend","display","responsive","tooltips","callbacks","label","tooltipItem","dataset","datasetIndex","total","previousValue","currentValue","percentage","destroy","encodeURI","ref","VehicleClasses","VehicleStats","loading","total_vehicles","total_classes","sorted_vehicles","sorted_classes","v","veh","Timer","online","App","React","document","basename","component","location","search","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.50b16654.chunk.js","sourcesContent":["import servers_list from \"./serverslist.json\";\r\n\r\nconst timeout = promise => new Promise(function(resolve, reject) {\r\n    setTimeout(() => reject(new Error(\"timeout\")), 2000);\r\n    promise.then(resolve, reject);\r\n});\r\n\r\nexport const initAllServers = () => dispatch => {\r\n    dispatch({type: \"CLEARSERVERSLIST\"})\r\n\r\n    servers_list.forEach((server,index) => {\r\n        dispatch({\r\n            type: \"ADDSERVER\",\r\n            data: {\r\n                \"error\": null,\r\n                \"isLoaded\": false,\r\n                \"ip\": server[0],\r\n                \"name\": server[1],\r\n                \"playersData\": null,\r\n                \"serverData\": null,\r\n                \"lastUpdate\": null,\r\n                \"vehicleData\": null\r\n            },\r\n            index\r\n        })\r\n        fetchServer(server,index)(dispatch);\r\n    });\r\n\r\n    dispatch({type: \"SERVERSINITED\"});\r\n};\r\n\r\nexport const fetchServer = (server,index) => dispatch => {\r\n    timeout( fetch(\"http://\"+server[0]+\"/status/widget/players.json\").then(res => res.json()) ).then(res => {\r\n            res.players.forEach(player=>{if(player[5] === \"\") player[5] = \"Unemployed\";});\r\n            // res.server[\"dxp\"] = [true, 'gasdg', 3600000 + (Math.random()*20000), 1]\r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    isLoaded: true,\r\n                    playersData: res.players,\r\n                    serverData: res.server,\r\n                    lastUpdate: Date.now()\r\n                },\r\n                index\r\n            })\r\n        },() => {\r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    isLoaded: true,\r\n                    error: true,\r\n                    lastUpdate: Date.now()\r\n                },\r\n                index\r\n            })\r\n        }\r\n    ).catch(() => {\r\n        dispatch({\r\n            type: \"UPDATESERVER\",\r\n            data: {\r\n                isLoaded: true,\r\n                error: true,\r\n                lastUpdate: Date.now()\r\n            },\r\n            index\r\n        })\r\n})}\r\n\r\nexport const fetchDetailedServer = (server, index) => dispatch => {\r\n    timeout(\r\n        fetch(\"http://\"+server.ip+\"/status/map/positions.json\")\r\n        .then(res => res.json()))\r\n        .then(res => {\r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    vehicleData: res.players.map(player=>player[4])\r\n                },\r\n                index\r\n            });\r\n    }).catch((err)=>console.log(err))\r\n}","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport * as dispatch_list from \"./fetchdata.js\"\r\n\r\nconst reducer = (data, action) => {\r\n    switch(action.type){\r\n        case (\"ADDSERVER\"):\r\n            const tempArray = data.servers.slice();\r\n            tempArray.splice(action.index, 0, action.data);\r\n            data.servers = tempArray;\r\n            return {...data};\r\n\r\n        case (\"SERVERSINITED\"):\r\n            return {...data, inited: true};\r\n\r\n        case (\"UPDATESERVER\"):\r\n            data.servers = data.servers.map((data, index) => index !== action.index ? data : {\r\n                  ...data,\r\n                  ...action.data\r\n                });\r\n            return {...data};\r\n\r\n        case (\"CLEARSERVERSLIST\"):\r\n            data.servers = [];\r\n            return {...data};\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    servers: [],\r\n    inited: false\r\n}\r\n\r\nexport const StoreContext = createContext(initialState);\r\n\r\nexport const StoreProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    useEffect(() => {\r\n        dispatch_list.initAllServers()(dispatch)\r\n    }, []);\r\n\r\n    return (\r\n        <StoreContext.Provider value={{state, dispatch, dispatch_list}}>\r\n            {children}\r\n        </StoreContext.Provider>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nconst dxpalert = (dxp, timestamp) => {\r\n    if(!dxp || !timestamp) return;\r\n    alert(`Host: ${dxp[1]}\\nDXP Ends: ${new Date(timestamp + dxp[2])}\\nAdditional Time: ${dxp[3] ? Number(dxp[3]/1000/60).toFixed(1) + ' min' : '-'}`);\r\n}\r\n\r\nexport default function DxpClock ({dxp, timestamp}) {\r\n    const [time, setTime] = useState(  parseInt((timestamp + dxp[2] - Date.now())/1000)  );\r\n\r\n    useEffect(()=>{\r\n        const interval = setInterval(()=>{\r\n            setTime(t => {\r\n                if(t <= 1) clearInterval(interval);\r\n                return t-1;\r\n            });\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const HH = Math.floor(time / 3600);\r\n    const divisor_for_minutes = time % 3600;\r\n    const MM = Math.floor(divisor_for_minutes / 60);\r\n    const SS = Math.ceil(divisor_for_minutes % 60);\r\n    return (<>{time < 1 ? '-' : \r\n                <span className=\"dxpcursor\" onClick={()=>dxpalert(dxp, timestamp)}>\r\n                    {HH?HH+'h ':''} \r\n                    {MM?MM+'m ': HH?'0m ':''} \r\n                    {SS?SS+'s':'0s'}\r\n                </span>}\r\n            </>);\r\n}","import React, { useContext } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DxpClock from \"./DxpClock\";\r\n\r\nexport default function ServersStatus(){\r\n    const store = useContext(StoreContext);\r\n\r\n    return (\r\n        <div id=\"serversStatus\">\r\n            <h2>Transport Tycoon Servers List</h2>\r\n            <table>\r\n                <tbody>\r\n                <tr><th>Connect</th><th>Players</th><th>Status</th><th>Uptime</th><th>DXP</th><th>Details</th></tr>\r\n                {store.state.servers.map((server,index)=>{\r\n                    if (server.error || server.playersData === undefined) {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{server.ip}<br/><b>{server.name}</b></td>\r\n                                <td>-/-</td><td className=\"offline\">OFFLINE</td>\r\n                                <td>-</td>\r\n                                <td>-</td>\r\n                                <td>-</td>\r\n                            </tr>\r\n                        );\r\n                    } else if (server.isLoaded === false) {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{server.ip}<br/><b>{server.name}</b></td>\r\n                                <td>-/-</td><td className=\"loading\">Loading</td>\r\n                                <td>-</td>\r\n                                <td>-</td>\r\n                                <td>-</td>\r\n                            </tr>\r\n                        );\r\n                    } else {//\r\n                        // <><Link to={\"/?serverinfo=\"+(+index+1)} className=\"btn btn-primary\" title={`Active: Yes, Minutes Left: ${Number(Number(dxp[2])/1000/60).toFixed(1)}, Additional Time: ${dxp[3]}`}>Yes</Link></> : '-'\r\n                        const dxp = server['serverData']['dxp'];\r\n                        const isDxpActive = dxp !== undefined && dxp[0] === true;\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>\r\n                                    <a href ={\"fivem://connect/\" + server.ip} title=\"Connect to the server\">{server.ip}</a><br/>\r\n                                    <b>{server.name}</b>\r\n                                </td>\r\n                                <td>{server.playersData.length}/{server.serverData.limit}</td>\r\n                                <td className=\"online\">ONLINE</td>\r\n                                <td>{server.serverData ? server.serverData.uptime : '-'}</td>\r\n                                {isDxpActive ? \r\n                                    <td className=\"dxp\"><DxpClock dxp={dxp} timestamp={server.lastUpdate}/></td> : \r\n                                    <td>-</td>}\r\n                                <td><Link to={\"/?serverinfo=\"+(+index+1)} className=\"btn btn-primary\">Players</Link></td>\r\n                            </tr>\r\n                        );\r\n                    }\r\n                })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Total Players Online: {store.state.servers.reduce((acc,server)=>server.isLoaded && server.playersData ? acc + server.playersData.length : acc,0)}</h3>\r\n        </div>\r\n    )\r\n}","import React, { useContext } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function ServerInfo (props) {\r\n    const store = useContext(StoreContext);\r\n    const urlprop = parseInt(props.url[1])\r\n\r\n    if(!urlprop || isNaN(urlprop)){\r\n        return <h2>URL ERROR</h2>;\r\n    }\r\n\r\n    const server = store.state.servers[urlprop-1];\r\n    if(store.state.inited === false){\r\n        return <h2>Loading</h2>;\r\n    }else if(server === undefined){\r\n        return <h2>SERVER ERROR</h2>;\r\n    }else{\r\n        return (\r\n            <div id=\"serverInfo\">\r\n                <h2>\r\n                    Name: {server.name}<br/>\r\n                    IP: <a href ={\"fivem://connect/\" + server.ip}>{server.ip}</a><br/>\r\n                    Uptime: {server.serverData ? server.serverData.uptime : \"?\"}<br/>\r\n                    Players: {server.playersData ? server.playersData.length : 0}/{server.playersData ? server.serverData.limit : 0}<br/>\r\n                    <Link to=\"/\" className=\"btn btn-primary\">Back</Link>\r\n                </h2>\r\n\r\n                {!server.playersData || server.playersData.length === 0 ? <h2>No Players</h2> : <>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr><th>Avatar</th><th>#</th><th>Name</th><th>ID</th><th>Job</th></tr>\r\n                            {server.playersData.map((player,index) => (\r\n                            <tr key={index}>\r\n                                <td>\r\n                                    {player[3] ? \r\n                                        <a href={player[3]} target=\"_blank\" rel=\"noopener noreferrer\"><img src={player[3] || \"#\"} height=\"50px\" alt=\"img\" className=\"avatar\"/></a> : \r\n                                        <div className=\"no-avatar\"/>}\r\n                                </td>\r\n                                <td>#{index+1}</td>\r\n                                <td><b>{player[0]}</b></td>\r\n                                <td>{player[2]}</td>\r\n                                <td>{player[5] || \"-\"}</td>\r\n                            </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </>}\r\n            <h2>Last Updated: {new Date(server.lastUpdate).toTimeString()}</h2>\r\n        </div>\r\n        );\r\n    }\r\n}","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\n\r\nconst showAvatar = false;\r\n\r\nexport default function PlayersList (props) {\r\n    const store = useContext(StoreContext);\r\n    var jobselectURL;\r\n\r\n    if(props.url.length>1){\r\n        props.url.forEach(item=>{\r\n            const data = item.split(\":\");\r\n            if(data[0] === \"job\"){\r\n                jobselectURL = decodeURI(data[1]);\r\n            }\r\n        })\r\n    }\r\n\r\n    const [localState, setlocalState] = useState({\r\n        playerFinderMessages: [],\r\n        playerFinderInputField: \"\",\r\n        playerFinderFound: [],\r\n        serverSelect: \"All Servers\",\r\n        jobSelect: jobselectURL || \"All Jobs\"\r\n    });\r\n\r\n    const [jobList,setJobList] = useState([])\r\n\r\n    const handlePlayersNameInput = (input) => {\r\n        const value = input.target.value;\r\n        setlocalState(s => ({...s, playerFinderInputField: value }));\r\n    }\r\n\r\n    const handleServerSelect = (input) => {\r\n        const value = input.target.value;\r\n        setlocalState(s => ({...s, serverSelect: value }));\r\n    }\r\n\r\n    const handleJobSelect = (input) => {\r\n        const value = input.target.value;\r\n        setlocalState(s => ({...s, jobSelect: value }));\r\n    }\r\n\r\n    const _handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            handlePlayerFinderSubmit();\r\n        }\r\n    }\r\n\r\n    const handlePlayerFinderSubmit = (isButton = true) => {\r\n        const input = localState.playerFinderInputField.toLowerCase()\r\n        const playerFinderFound = [];\r\n        store.state.servers.forEach(server=>{\r\n            if(server.playersData === null)return;\r\n            server.playersData.forEach(player=>{\r\n                const playername = (player[0]+\"#\"+player[2]);\r\n                if(playername.toLowerCase().includes(input) && \r\n                    (localState.serverSelect === \"All Servers\" || localState.serverSelect === server.name) &&\r\n                    (localState.jobSelect === \"All Jobs\" || localState.jobSelect === player[5])){\r\n                        playerFinderFound.push([\r\n                            playername,\r\n                            server[\"ip\"],\r\n                            server[\"name\"],\r\n                            player[3],\r\n                            player[5]\r\n                        ])\r\n                    }\r\n            })\r\n        })\r\n\r\n        setlocalState(s=>(\r\n            playerFinderFound.length > 0 ? \r\n                    {   ...s,\r\n                        playerFinderMessages: \"Found \" + playerFinderFound.length + \" player\" +(playerFinderFound.length === 1 ?\"\":\"s\"),\r\n                        playerFinderFound\r\n                    } : {\r\n                        ...s,\r\n                        playerFinderMessages: isButton ? \"Found nothing\" : \"...\",\r\n                        playerFinderFound: []\r\n                    }\r\n            )\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const tempJobsList = []\r\n        store.state.servers.forEach(server=>{\r\n            if(server.playersData){\r\n                server.playersData.forEach(player=>{\r\n                    if(!tempJobsList.includes(player[5])){\r\n                        tempJobsList.push(player[5]);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        setJobList(tempJobsList)\r\n        handlePlayerFinderSubmit(false);\r\n    },[store.state.servers])\r\n  \r\n    return (\r\n        <div id=\"playerFinder\">\r\n            <h2>Online Player Finder</h2>\r\n            <div id=\"form\">\r\n                <form>\r\n                    <input type=\"text\" placeholder=\"Player's name or in-game id\" onChange={(input)=>handlePlayersNameInput(input)} onKeyDown={_handleKeyDown}/>\r\n                    <div>\r\n                        <label htmlFor=\"serverSelector\">Filter Server</label>\r\n                        <select id=\"serverSelector\" onChange={handleServerSelect} value={localState.serverSelect}>\r\n                            <option value=\"All Servers\">All Servers</option>\r\n                            {store.state.servers.map((server,index)=>\r\n                                server.isLoaded ? <option key={index} value={server.name}>{server.name}</option> : \"\")}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"jobSelector\">Filter Job</label>\r\n                        <select id=\"jobSelector\" onChange={(input)=>handleJobSelect(input)} value={localState.jobSelect}> \r\n                            <option value=\"All Jobs\">All Jobs</option>\r\n                            {jobList.map((job,index)=>\r\n                                <option key={index} value={job}>{job}</option>)}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <input type=\"button\" value=\"search\" onClick={()=>handlePlayerFinderSubmit()}/>\r\n                </form>\r\n            </div>\r\n\r\n            <h2>{localState.playerFinderMessages}</h2>\r\n\r\n            {!localState.playerFinderFound ? \"\" :\r\n                <table>\r\n                    <tbody>\r\n                        {localState.playerFinderFound.map((player,index)=>\r\n                        \r\n                            <tr key={index}>\r\n                                <td>{player[3] && showAvatar === true ? //todo \r\n                                    <a href={player[3]} target=\"_blank\" rel=\"noopener noreferrer\"><img src={player[3] || \"#\"} height=\"50px\" alt=\"img\" className=\"avatar\"/></a> : \r\n                                    <div className=\"no-avatar\"/>\r\n                                }</td>\r\n                                <td>#{index+1}</td>\r\n                                <td><b>{player[0]}</b></td>\r\n                                <td>{player[4] || \"-\"}</td>\r\n                                <td><a href ={\"fivem://connect/\" + player[1]} title=\"connect\">{player[1]}</a><br/><b>{player[2]}</b></td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n            <h3>Total Players Online: {store.state.servers.reduce((acc,server)=>server.isLoaded && server.playersData ? acc + server.playersData.length : acc,0)}</h3>\r\n    </div>\r\n    )\r\n}","import React, { useContext, useEffect, useState, useRef } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Chart from \"chart.js\";\r\n\r\nconst colorArray = [\r\n    \"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\"#ADD8E6\",\"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\r\n    \"#ADD8E6\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\"#ADD8E6\",\"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\r\n    \"#ADD8E6\"\r\n];\r\n\r\nexport default function JobsStats () {\r\n    const [state, setState] = useState({entries: [], counter: 0});\r\n    const [state2, setState2] = useState({entries: [], counter: 0});\r\n    const store = useContext(StoreContext);\r\n    const chartRef = useRef();\r\n    \r\n    useEffect(() => {\r\n        if(store.state.inited && store.state.servers.reduce((acc,server)=>server.isLoaded === true ? acc + 1 : acc,0) === store.state.servers.length){\r\n            const jobs = {}\r\n\r\n            const companyjobs = {\r\n                \"COCO\": 0,\r\n                \"PIGS\": 0,\r\n                \"RTS\": 0,\r\n                \"BAT\": 0,\r\n                \"FRLLC\": 0,\r\n                \"IA\": 0\r\n            }\r\n\r\n            store.state.servers.forEach(server=>{\r\n                if(server.isLoaded === true && server.playersData !== null){\r\n                    server.playersData.forEach(player=>{\r\n                        if(jobs[player[5]] === undefined){\r\n                            jobs[player[5]] = 1;\r\n                        }else{\r\n                            jobs[player[5]]++;\r\n                        }\r\n\r\n                        if(player[5].startsWith(\"P.I.G.S.\")){\r\n                            companyjobs[\"PIGS\"]++;\r\n                        }else if(player[5].startsWith(\"R.T.S.\")){\r\n                            companyjobs[\"RTS\"]++;\r\n                        }else if(player[5].startsWith(\"CollinsCo\")){\r\n                            companyjobs[\"COCO\"]++;\r\n                        }else if(player[5].startsWith(\"IA \")){\r\n                            companyjobs[\"IA\"]++;\r\n                        }else if(player[5].startsWith(\"BAT\")){\r\n                            companyjobs[\"BAT\"]++;\r\n                        }else if(player[5].startsWith(\"FRLLC\")){\r\n                            companyjobs[\"FRLLC\"]++;\r\n                        }\r\n\r\n                    })\r\n                }\r\n            })\r\n            const sortedEntries = (Object.entries(jobs).sort((item1,item2)=>item2[1]-item1[1]));\r\n            const sortedEntriesCompany = (Object.entries(companyjobs).sort((item1,item2)=>item2[1]-item1[1]));\r\n            setState(s => ({\r\n                ...s,\r\n                entries: sortedEntries,\r\n                counter: (sortedEntries.reduce((acc,val)=>acc+val[1],0))\r\n            }))\r\n            setState2(s => ({\r\n                ...s,\r\n                entries: sortedEntriesCompany,\r\n                counter: (sortedEntriesCompany.reduce((acc,val)=>acc+val[1],0))\r\n            }))\r\n        }\r\n    }, [store.state.servers]); \r\n\r\n    useEffect(()=>{\r\n        if(chartRef && chartRef.current){\r\n            const current = chartRef.current.getContext(\"2d\");\r\n            const instance = new Chart(current, {\r\n                type: 'pie',\r\n                data: {\r\n                labels: state.entries.map(item=>item[0]),\r\n                datasets: [{\r\n                    data: state.entries.map(item=>item[1]),\r\n                    backgroundColor: colorArray,\r\n                    borderWidth: 0\r\n                }]\r\n                },\r\n                options: {\r\n                    legend: {\r\n                        display: false\r\n                    },\r\n                    responsive: true,\r\n            \r\n                    tooltips: {\r\n                        callbacks: {\r\n                                label: (tooltipItem, data) => {\r\n                                const dataset = data.datasets[tooltipItem.datasetIndex];\r\n                                const total = dataset.data.reduce((previousValue, currentValue)=> previousValue + currentValue);\r\n            \r\n                                const currentValue = dataset.data[tooltipItem.index];\r\n                                const percentage = Math.floor(((currentValue/total) * 100)+0.5);\r\n                                return `${data.labels[tooltipItem.index]} - ${currentValue} players (${percentage}%)`;\r\n                                }\r\n                            }\r\n                        } \r\n                }});\r\n            return () => instance.destroy();\r\n        }\r\n    },[state]);\r\n\r\n    return (\r\n        <div id=\"jobsStats\">\r\n            <h2>Top Jobs Now</h2>\r\n            {state.entries.length === 0 ? <div>Loading...</div> : \r\n                <table>\r\n                    <tbody>\r\n                    <tr><th>%</th><th>Job Name</th><th>Active</th><th>Links</th></tr>\r\n                    {state.entries.map((job,index)=>{\r\n                        return <tr key={index}><td>{Number(job[1]/state.counter*100).toFixed(1)}%</td><td>{job[0]}</td><td>{job[1]}</td><td><Link to={encodeURI(\"/?playerfinder=job:\" + job[0])}>Players</Link></td></tr>\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n            \r\n            <div id=\"split\"/>\r\n            \r\n            <h2>Top Company Jobs Now</h2>\r\n\r\n            {state2.entries.length === 0 ? <div>Loading...</div> : \r\n                <table>\r\n                    <tbody>\r\n                    <tr><th>%</th><th>Job Name</th><th>Active</th></tr>\r\n                    {state2.entries.map((job,index)=>{\r\n                        return <tr key={index}><td>{Number(job[1]/state2.counter*100).toFixed(1)}%</td><td>{job[0]}</td><td>{job[1]}</td></tr>\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n\r\n            <div id=\"split\"/>\r\n\r\n            <div>\r\n                <canvas id=\"myChart\" ref={chartRef}></canvas>\r\n            </div>\r\n\r\n            <h3>Total Players Online: {store.state.servers.reduce((acc,server)=>server.isLoaded && server.playersData ? acc + server.playersData.length : acc,0)}</h3>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\n\r\nconst VehicleClasses = [\r\n    \"Compact Cars\",\"Sedans\",\"SUVs\",\"Coupes\", \"Muscle Cars\",\"Sports Classics\",\"Sports Cars\",\"Super Cars\",\"Motorcycles\",\"Off-road Cars\", \"Industrial Vehicles\",\"Utility Vehicles\",\"Vans\",\"Cycles\",\"Boats\",\"Helicopters\", \"Planes\",\"Service Vehicles\",\"Emergency Vehicles\",\"Military Vehicles\",\"Commercial Vehicles\",\"Trains\",\r\n];\r\n\r\nexport default function VehicleStats(){\r\n    const store = useContext(StoreContext);\r\n    const [state, setState] = useState({\r\n        loading: true,\r\n        error: null,\r\n        timestamp: 0,\r\n        total_vehicles: 0,\r\n        total_classes: 0,\r\n        sorted_vehicles: null,\r\n        sorted_classes: null,\r\n    });\r\n\r\n    useEffect(()=>{\r\n        fetch(\"https://novaplus.herokuapp.com/vehicles\").then(res=>res.json()).then(res=>{\r\n            if(res && res.timestamp > 0){\r\n                setState(s => ({...s, \r\n                                ...res,\r\n                                total_vehicles: res.sorted_vehicles.reduce((acc, v) => acc + v[1], 0),\r\n                                total_classes: res.sorted_classes.reduce((acc, v) => acc + v[1], 0),\r\n                                loading: false\r\n                            }));\r\n            }else{\r\n                setState(s => ({...s, error: \"Error while loading the data\", loading: false}));\r\n            }\r\n        }).catch(err=>{\r\n            console.log(err);\r\n            setState(s => ({...s, error: \"Error while state.loading the data\", loading: false}));\r\n        })\r\n    },[])\r\n\r\n    \r\n    return (\r\n        <div id=\"carsStats\">\r\n            <h2>Top Vehicles Now</h2>\r\n\r\n            {state.loading ? <h2>Loading</h2> : \r\n                state.error ? <h2>Error while trying to load the data, try again later.</h2> :\r\n                    <>\r\n                    <table>\r\n                        <tbody>\r\n                            {!state.sorted_vehicles ? <tr><td>N/A</td></tr> :\r\n                                <>\r\n                                    <tr><th>%</th><th>Name</th><th>Active</th></tr>\r\n                                    {state.sorted_vehicles.map((veh, index) => {\r\n                                        return (<tr key={index}>\r\n                                                <td>{Number(veh[1]/state.total_vehicles*100).toFixed(2)}%</td>\r\n                                                <td>{veh[0]}</td>\r\n                                                <td>{veh[1]}</td>\r\n                                            </tr>)\r\n                                    })}\r\n                                </>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <h2>Top Vehicle Classes Now</h2>\r\n                    <table>\r\n                        <tbody>\r\n                            {!state.sorted_classes ? <tr><td>N/A</td></tr> :\r\n                                <>\r\n                                    <tr><th>%</th><th>Name</th><th>Active</th></tr>\r\n                                    {state.sorted_classes.map((veh, index) => {\r\n                                        return (<tr key={index}>\r\n                                                <td>{Number(veh[1]/state.total_vehicles*100).toFixed(2)}%</td>\r\n                                                <td>{veh[0] === -1 ? \"On Foot\" : VehicleClasses[parseInt(veh[0])] || \"?\"}</td>\r\n                                                <td>{veh[1]}</td>\r\n                                            </tr>)\r\n                                    })}\r\n                                </>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <h3>Vehicle stats updates every 5 minutes<br/>Last Updated: {new Date(state.timestamp).toTimeString()}</h3>\r\n                    </>\r\n            }\r\n            <h3>Total Players Online: {store.state.servers.reduce((acc,server)=>server.isLoaded && server.playersData ? acc + server.playersData.length : acc, 0)}</h3>\r\n        </div>\r\n    )\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\nimport { initAllServers } from \"../fetchdata\";\r\n\r\nexport default function Timer (){\r\n    const [state, setState] = useState({total: 0, online: 0});\r\n    const store = useContext(StoreContext);\r\n    \r\n    function handleOnClickRefresh(){\r\n        initAllServers()(store.dispatch)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState(s => ({\r\n            ...s,\r\n            total: store.state.servers.length,\r\n            online: store.state.servers.reduce((acc,server)=>server.isLoaded === true && server.serverData ? acc + 1 : acc ,0),\r\n        }));\r\n\r\n    },[store.state.servers]);\r\n\r\n    return (\r\n        <div id=\"footer\">\r\n            <h3>\r\n                Server data is loaded from {state.online} out of {state.total} servers <input type=\"button\" value=\"refresh all servers\" className=\"btn2 refresh\" onClick={handleOnClickRefresh}/>\r\n            </h3>\r\n        </div> \r\n    )\r\n}","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link//,\r\n  // Redirect\r\n} from \"react-router-dom\";\r\nimport ServersStatus from \"./ServersStatus\";\r\nimport ServerInfo from \"./ServerInfo\";\r\nimport PlayerFinder from \"./PlayerFinder\";\r\nimport JobsStats from \"./JobsStats\";\r\nimport VehicleStats from \"./VehicleStats\";\r\nimport Footer from \"./Footer\";\r\nimport { StoreProvider } from '../store';\r\n\r\n\r\nexport default function App() {\r\n  React.useEffect(()=>{\r\n    document.title = \"TTSTATS | Transport Tycoon Server Browser\";\r\n  },[])\r\n\r\n  return (\r\n    <Router basename=\"/\">\r\n    {/* <Router basename=\"ttstats\"> */}\r\n      <StoreProvider>\r\n        <div id=\"header\">\r\n          <ul>\r\n            <li><Link to=\"/\">Servers Status</Link></li>\r\n            <li><Link to=\"?playerfinder\">Player Finder</Link></li>\r\n            <li><Link to=\"?vehicles\">Vehicle Stats</Link></li>\r\n            <li><Link to=\"?jobs\">Job Stats</Link></li>\r\n            <li><a href=\"http://ttmap.aca.lt\" className=\"gold\">ttmap.aca.lt</a></li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div id=\"content\">\r\n          <Route component={\r\n            (props)=>{\r\n              const url = props.location.search.split(\"=\");\r\n              switch(url[0]){\r\n                case (\"?status\"):\r\n                  return <ServersStatus/>;\r\n                case (\"?serverinfo\"):\r\n                  return <ServerInfo url={url}/>;\r\n                case (\"?jobs\"):\r\n                  return <JobsStats/>;\r\n                case (\"?vehicles\"):\r\n                  return <VehicleStats/>;\r\n                case (\"?playerfinder\"):\r\n                  return <PlayerFinder url={url}/>;\r\n                default:\r\n                  return <ServersStatus/>;\r\n              }\r\n            }}/>\r\n        </div>\r\n\r\n        <Footer/>\r\n      </StoreProvider>\r\n    </Router>\r\n  );\r\n}\r\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./style.scss\";\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}
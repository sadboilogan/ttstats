{"version":3,"sources":["fetchdata.js","store.js","components/DxpClock.js","components/Uptime.js","components/ServersStatus.js","components/ServerInfo.js","components/PlayerFinder.js","components/JobsStats.js","components/VehicleStats.js","components/TopTen.js","components/Footer.js","components/HighestID.js","components/App.js","index.js"],"names":["timeout","promise","Promise","resolve","reject","setTimeout","Error","then","initAllServers","dispatch","type","servers_list","forEach","server","index","data","fetchServer","fetch","res","json","players","player","isLoaded","playersData","serverData","lastUpdate","Date","now","error","catch","fetchDetailedServer","ip","vehicleData","map","err","console","log","reducer","action","tempArray","servers","slice","splice","inited","initialState","StoreContext","createContext","StoreProvider","children","useReducer","state","useEffect","dispatch_list","Provider","value","DxpClock","dxp","timestamp","useState","parseInt","time","setTime","interval","setInterval","t","clearInterval","HH","Math","floor","divisor_for_minutes","MM","SS","ceil","className","onClick","alert","Number","toFixed","dxpalert","notify","Uptime","timeObj","h","m","split","endsWith","replace","color","style","ServersStatus","store","useContext","id","undefined","key","name","to","title","isDxpActive","href","length","limit","uptime","ServerInfo","props","urlprop","url","isNaN","src","directIp","alt","referrerpolicy","target","rel","height","toTimeString","PlayersList","jobselectURL","item","decodeURI","playerFinderMessages","playerFinderInputField","playerFinderFound","serverSelect","jobSelect","localState","setlocalState","jobList","setJobList","handlePlayerFinderSubmit","isButton","input","toLowerCase","playername","includes","push","s","tempJobsList","placeholder","onChange","handlePlayersNameInput","onKeyDown","e","preventDefault","htmlFor","handleJobSelect","job","colorArray","JobsStats","entries","counter","setState","state2","setState2","chartRef","useRef","reduce","acc","jobs","companyjobs","startsWith","sortedEntries","Object","sort","item1","item2","sortedEntriesCompany","val","current","getContext","instance","Chart","labels","datasets","backgroundColor","borderWidth","options","legend","display","responsive","tooltips","callbacks","label","tooltipItem","dataset","datasetIndex","total","previousValue","currentValue","percentage","destroy","class","encodeURI","ref","VehicleClasses","VehicleStats","loading","total_vehicles","total_classes","sorted_vehicles","sorted_classes","v","veh","top10_job_names","prepend","Top10","leaderboard","username","user_id","amount","toLocaleString","Timer","online","HighestID","players_list","final_list","a","b","fontSize","App","React","document","basename","component","location","search","ReactDOM","render","getElementById"],"mappings":"i6EAEMA,EAAU,SAAAC,GAAO,OAAI,IAAIC,SAAQ,SAASC,EAASC,GACrDC,YAAW,kBAAMD,EAAO,IAAIE,MAAM,cAAa,KAC/CL,EAAQM,KAAKJ,EAASC,OAGbI,EAAiB,kBAAM,SAAAC,GAChCA,EAAS,CAACC,KAAM,qBAEhBC,EAAaC,SAAQ,SAACC,EAAOC,GACzBL,EAAS,CACLC,KAAM,YACNK,KAAM,CACF,MAAS,KACT,UAAY,EACZ,GAAMF,EAAO,GACb,KAAQA,EAAO,GACf,YAAe,KACf,WAAc,KACd,WAAc,KACd,YAAe,KACf,SAAYA,EAAO,IAEvBC,UAEJE,EAAYH,EAAOC,EAAnBE,CAA0BP,MAG9BA,EAAS,CAACC,KAAM,oBAGPM,EAAc,SAACH,EAAQC,GAAT,OAAmB,SAAAL,GAC1CT,EAASiB,MAAM,UAAUJ,EAAO,GAAG,+BAA+BN,MAAK,SAAAW,GAAG,OAAIA,EAAIC,WAAUZ,MAAK,SAAAW,GACzFA,EAAIE,QAAQR,SAAQ,SAAAS,GAA0B,KAAdA,EAAO,KAAWA,EAAO,GAAK,iBAE9DZ,EAAS,CACLC,KAAM,eACNK,KAAM,CACFO,UAAU,EACVC,YAAaL,EAAIE,QACjBI,WAAYN,EAAIL,OAChBY,WAAYC,KAAKC,OAErBb,aAEN,WACEL,EAAS,CACLC,KAAM,eACNK,KAAM,CACFO,UAAU,EACVM,OAAO,EACPH,WAAYC,KAAKC,OAErBb,aAGVe,OAAM,WACJpB,EAAS,CACLC,KAAM,eACNK,KAAM,CACFO,UAAU,EACVM,OAAO,EACPH,WAAYC,KAAKC,OAErBb,eAICgB,EAAsB,SAACjB,EAAQC,GAAT,OAAmB,SAAAL,GAClDT,EACIiB,MAAM,UAAUJ,EAAOkB,GAAG,8BACzBxB,MAAK,SAAAW,GAAG,OAAIA,EAAIC,WAChBZ,MAAK,SAAAW,GACFT,EAAS,CACLC,KAAM,eACNK,KAAM,CACFiB,YAAad,EAAIE,QAAQa,KAAI,SAAAZ,GAAM,OAAEA,EAAO,OAEhDP,aAETe,OAAM,SAACK,GAAD,OAAOC,QAAQC,IAAIF,QC9E1BG,EAAU,SAACtB,EAAMuB,GACnB,OAAOA,EAAO5B,MACV,IAAM,YACF,IAAM6B,EAAYxB,EAAKyB,QAAQC,QAG/B,OAFAF,EAAUG,OAAOJ,EAAOxB,MAAO,EAAGwB,EAAOvB,MACzCA,EAAKyB,QAAUD,EACR,eAAIxB,GAEf,IAAM,gBACF,OAAO,2BAAIA,GAAX,IAAiB4B,QAAQ,IAE7B,IAAM,eAKF,OAJA5B,EAAKyB,QAAUzB,EAAKyB,QAAQP,KAAI,SAAClB,EAAMD,GAAP,OAAiBA,IAAUwB,EAAOxB,MAAQC,EAAzB,2BACxCA,GACAuB,EAAOvB,SAET,eAAIA,GAEf,IAAM,mBAEF,OADAA,EAAKyB,QAAU,GACR,eAAIzB,GAEf,QACI,OAAOA,IAIb6B,EAAe,CACjBJ,QAAS,GACTG,QAAQ,GAGCE,EAAeC,wBAAcF,GAE7BG,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACnBC,qBAAWZ,EAASO,GADD,mBACtCM,EADsC,KAC/BzC,EAD+B,KAO3C,OAJA0C,qBAAU,WACNC,IAA+B3C,KAChC,IAGC,kBAACoC,EAAaQ,SAAd,CAAuBC,MAAO,CAACJ,QAAOzC,WAAU2C,kBAC3CJ,ICvCE,SAASO,EAAT,GAAsC,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,UAAY,EACxBC,mBAAWC,UAAUF,EAAYD,EAAI,GAAK9B,KAAKC,OAAO,MAD9B,mBACzCiC,EADyC,KACnCC,EADmC,KAGhDV,qBAAU,WACN,IAAMW,EAAWC,aAAY,WACzBF,GAAQ,SAAAG,GAEJ,OADGA,GAAK,GAAGC,cAAcH,GAClBE,EAAE,OAEd,KACH,OAAO,kBAAMC,cAAcH,MAC5B,IAEH,IAAMI,EAAKC,KAAKC,MAAMR,EAAO,MACvBS,EAAsBT,EAAO,KAC7BU,EAAKH,KAAKC,MAAMC,EAAsB,IACtCE,EAAKJ,KAAKK,KAAKH,EAAsB,IAC3C,OAAQ,oCAAGT,EAAO,EAAI,IACV,0BAAMa,UAAU,YAAYC,QAAS,kBAvBpC,SAAClB,EAAKC,GACfD,GAAQC,GACZkB,MAAM,SAAD,OAAUnB,EAAI,GAAd,uBAA+B,IAAI9B,KAAK+B,EAAYD,EAAI,IAAxD,8BAAiFA,EAAI,GAAKoB,OAAOpB,EAAI,GAAG,IAAK,IAAIqB,QAAQ,GAAK,OAAS,MAqBvFC,CAAStB,EAAKC,KAClDS,EAAGA,EAAG,KAAK,GACXI,EAAGA,EAAG,KAAMJ,EAAG,MAAM,GACrBK,EAAGA,EAAG,IAAI,OC1B/B,IAAMQ,EAAS,kBAAMJ,MAAM,4CAEZ,SAASK,EAAT,GAA0B,IAARpB,EAAO,EAAPA,KACvBqB,EAAU,CAAEC,EAAG,EAAGC,EAAG,GAE3BvB,EAAKwB,MAAM,KAAKxE,SAAQ,SAAAoD,GACjBA,EAAEqB,SAAS,KACVJ,EAAQE,EAAIxB,SAASK,EAAEsB,QAAQ,IAAI,KAC9BtB,EAAEqB,SAAS,OAChBJ,EAAQC,EAAIvB,SAASK,EAAEsB,QAAQ,IAAI,SAI3C,IAAMC,EAAwB,KAAdN,EAAQC,GAAYD,EAAQE,EAAI,GAAK,SACrCF,EAAQC,GAAK,GAAK,MAAQ,KAE1C,OAAQ,0BAAMT,UAAU,YAAYC,QAASK,EAAQS,MAAOD,EAAQ,CAACA,SAAS,IAAK3B,GCZxE,SAAS6B,IACpB,IAAMC,EAAQC,qBAAW9C,GAEzB,OACI,yBAAK+C,GAAG,kBACJ,6DACA,+BACI,+BACA,4BAAI,uCAAgB,uCAAgB,sCAAe,sCAAe,oCACjEF,EAAMxC,MAAMV,QAAQP,KAAI,SAACpB,EAAOC,GAE7B,GAAID,EAAOe,YAAgCiE,IAAvBhF,EAAOU,cAAiD,IAApBV,EAAOS,SAC3D,OACI,wBAAIwE,IAAKhF,GACL,4BAAKD,EAAOkB,GAAG,6BAAK,2BAAIlB,EAAOkF,OAC/B,oCACqB,IAApBlF,EAAOS,SACJ,wBAAImD,UAAU,WAAd,WACA,wBAAIA,UAAU,WACV,kBAAC,IAAD,CAAMuB,GAAI,kBAAkBlF,EAAM,GAAI2D,UAAU,kBAAkBwB,MAAM,eAAxE,YAER,iCACA,wBAAIxB,UAAU,OAAd,MAIR,IAAMjB,EAAM3C,EAAM,WAAN,IACNqF,OAAsBL,IAARrC,IAAgC,IAAXA,EAAI,GAE7C,OACI,wBAAIsC,IAAKhF,GACL,4BACI,uBAAGqF,KAAO,mBAAqBtF,EAAOkB,GAAIkE,MAAM,yBAAyBpF,EAAOkB,IAAO,6BACvF,2BAAIlB,EAAOkF,OAEf,4BAAI,kBAAC,IAAD,CAAMC,GAAI,kBAAkBlF,EAAM,GAAI2D,UAAU,kBAAkBwB,MAAM,eAAepF,EAAOU,YAAY6E,OAA1G,IAAmHvF,EAAOW,WAAW6E,QACzI,wBAAI5B,UAAU,UAAd,UACA,4BAAK5D,EAAOW,WAAa,kBAACwD,EAAD,CAAQpB,KAAM/C,EAAOW,WAAW8E,SAAY,KACrE,wBAAI7B,UAAU,OAAOyB,EAAc,kBAAC3C,EAAD,CAAUC,IAAKA,EAAKC,UAAW5C,EAAOY,aAAgB,iDCxC1G,SAAS8E,EAAYC,GAChC,IAAMd,EAAQC,qBAAW9C,GACnB4D,EAAU9C,SAAS6C,EAAME,IAAI,IAEnC,IAAID,GAAWE,MAAMF,GACjB,OAAO,yCAGX,IAAM5F,EAAS6E,EAAMxC,MAAMV,QAAQiE,EAAQ,GAC3C,OAA0B,IAAvBf,EAAMxC,MAAMP,OACJ,4CACSkD,IAAXhF,EACE,4CAGH,6BACI,qCACWA,EAAOkF,KAAK,6BADvB,OAEQ,uBAAGI,KAAO,mBAAqBtF,EAAOkB,IAAKlB,EAAOkB,IAAO,6BAC5DlB,EAAOW,WACJ,+CACaX,EAAOW,WAAW8E,OAAO,6BADtC,YAEczF,EAAOU,YAAcV,EAAOU,YAAY6E,OAAS,EAF/D,IAEmEvF,EAAOU,YAAcV,EAAOW,WAAW6E,MAAQ,GAElH,yDACH,6BACD,yBAAKO,IAAK,8BAAgC/F,EAAOgG,SAAW,aAAcC,IAAI,GAAGrC,UAAU,aAAasC,eAAe,gBAAe,6BACtI,yBAAKH,IAAK,8BAAgC/F,EAAOgG,SAAW,4CAA6CC,IAAI,GAAGrC,UAAU,aAAasC,eAAe,gBAAe,6BACrK,kBAAC,IAAD,CAAMf,GAAG,IAAIvB,UAAU,qBAAvB,SAGF5D,EAAOU,aAA6C,IAA9BV,EAAOU,YAAY6E,OAAqC,oCAC5E,+BACI,+BACI,4BAAI,sCAAe,iCAAU,oCAAa,kCAAW,oCACpDvF,EAAOU,YAAYU,KAAI,SAACZ,EAAOP,GAAR,OACxB,wBAAIgF,IAAKhF,GACL,4BACKO,EAAO,GACJ,uBAAG8E,KAAM9E,EAAO,GAAI2F,OAAO,SAASC,IAAI,uBAAsB,yBAAKL,IAAKvF,EAAO,IAAM,IAAK6F,OAAO,OAAOJ,IAAI,MAAMrC,UAAU,YAC5H,yBAAKA,UAAU,eAEvB,gCAAM3D,EAAM,GACZ,4BAAI,2BAAIO,EAAO,KACf,4BAAKA,EAAO,IACZ,4BAAKA,EAAO,IAAM,YAdwB,0CAoB9D,6CAAmB,IAAIK,KAAKb,EAAOY,YAAY0F,iBClD5C,SAASC,EAAaZ,GACjC,IACIa,EADE3B,EAAQC,qBAAW9C,GAGtB2D,EAAME,IAAIN,OAAO,GAChBI,EAAME,IAAI9F,SAAQ,SAAA0G,GACd,IAAMvG,EAAOuG,EAAKlC,MAAM,KACT,QAAZrE,EAAK,KACJsG,EAAeE,UAAUxG,EAAK,QARF,MAaJ2C,mBAAS,CACzC8D,qBAAsB,GACtBC,uBAAwB,GACxBC,kBAAmB,GACnBC,aAAc,cACdC,UAAWP,GAAgB,aAlBS,mBAajCQ,EAbiC,KAarBC,EAbqB,OAqBVpE,mBAAS,IArBC,mBAqBjCqE,EArBiC,KAqBxBC,EArBwB,KA6ClCC,EAA2B,WAAsB,IAArBC,IAAoB,yDAC5CC,EAAQN,EAAWJ,uBAAuBW,cAC1CV,EAAoB,GAC1BhC,EAAMxC,MAAMV,QAAQ5B,SAAQ,SAAAC,GACE,OAAvBA,EAAOU,aACVV,EAAOU,YAAYX,SAAQ,SAAAS,GACvB,IAAMgH,EAAchH,EAAO,GAAG,IAAIA,EAAO,IACtCgH,EAAWD,cAAcE,SAASH,IACJ,gBAA5BN,EAAWF,cAAkCE,EAAWF,eAAiB9G,EAAOkF,MACvD,aAAzB8B,EAAWD,WAA4BC,EAAWD,YAAcvG,EAAO,IACpEqG,EAAkBa,KAAK,CACnBF,EACAxH,EAAM,GACNA,EAAM,KACNQ,EAAO,GACPA,EAAO,WAM3ByG,GAAc,SAAAU,GAAC,OACXd,EAAkBtB,OAAS,EAA3B,2BACeoC,GADf,IAEYhB,qBAAsB,SAAWE,EAAkBtB,OAAS,WAAyC,IAA7BsB,EAAkBtB,OAAc,GAAG,KAC3GsB,sBAHZ,2BAKec,GALf,IAMYhB,qBAAsBU,EAAW,gBAAkB,MACnDR,kBAAmB,SAwBvC,OAlBAvE,qBAAU,WACN,IAAMsF,EAAe,GACrB/C,EAAMxC,MAAMV,QAAQ5B,SAAQ,SAAAC,GACrBA,EAAOU,aACNV,EAAOU,YAAYX,SAAQ,SAAAS,GACnBoH,EAAaH,SAASjH,EAAO,KAC7BoH,EAAaF,KAAKlH,EAAO,UAMzC2G,EAAWS,GACXR,GAAyB,KAG1B,CAACvC,EAAMxC,MAAMV,UAGZ,yBAAKoD,GAAG,iBACJ,oDACA,yBAAKA,GAAG,QACJ,8BACI,2BAAOlF,KAAK,OAAOgI,YAAY,8BAA8BC,SAAU,SAACR,GAAD,OAhFxD,SAACA,GAC5B,IAAM7E,EAAQ6E,EAAMnB,OAAO1D,MAC3BwE,GAAc,SAAAU,GAAC,kCAASA,GAAT,IAAYf,uBAAwBnE,OA8EyCsF,CAAuBT,IAAQU,UAjExG,SAACC,GACN,UAAVA,EAAEhD,MACFgD,EAAEC,iBACFd,QA+DQ,6BACI,2BAAOe,QAAQ,kBAAf,iBACA,4BAAQpD,GAAG,iBAAiB+C,SA9ErB,SAACR,GACxB,IAAM7E,EAAQ6E,EAAMnB,OAAO1D,MAC3BwE,GAAc,SAAAU,GAAC,kCAASA,GAAT,IAAYb,aAAcrE,QA4EiCA,MAAOuE,EAAWF,cACxE,4BAAQrE,MAAM,eAAd,eACCoC,EAAMxC,MAAMV,QAAQP,KAAI,SAACpB,EAAOC,GAAR,OACrBD,EAAOS,SAAW,4BAAQwE,IAAKhF,EAAOwC,MAAOzC,EAAOkF,MAAOlF,EAAOkF,MAAiB,QAI/F,6BACI,2BAAOiD,QAAQ,eAAf,cACA,4BAAQpD,GAAG,cAAc+C,SAAU,SAACR,GAAD,OAlF/B,SAACA,GACrB,IAAM7E,EAAQ6E,EAAMnB,OAAO1D,MAC3BwE,GAAc,SAAAU,GAAC,kCAASA,GAAT,IAAYZ,UAAWtE,OAgFsB2F,CAAgBd,IAAQ7E,MAAOuE,EAAWD,WAClF,4BAAQtE,MAAM,YAAd,YACCyE,EAAQ9F,KAAI,SAACiH,EAAIpI,GAAL,OACT,4BAAQgF,IAAKhF,EAAOwC,MAAO4F,GAAMA,QAI7C,2BAAOxI,KAAK,SAAS4C,MAAM,SAASoB,QAAS,kBAAIuD,SAIzD,4BAAKJ,EAAWL,sBAEdK,EAAWH,kBACT,+BACI,+BACKG,EAAWH,kBAAkBzF,KAAI,SAACZ,EAAOP,GAAR,OAE9B,wBAAIgF,IAAKhF,GACL,6BAAKO,EAAO,GAER,yBAAKoD,UAAU,gBAEnB,gCAAM3D,EAAM,GACZ,4BAAI,2BAAIO,EAAO,KACf,4BAAKA,EAAO,IAAM,KAClB,4BAAI,uBAAG8E,KAAO,mBAAqB9E,EAAO,GAAI4E,MAAM,WAAW5E,EAAO,IAAO,6BAAK,2BAAIA,EAAO,WAbhF,I,sBChIvC8H,EAAa,CACf,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UACpkB,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAC9a,WAGW,SAASC,IAAc,IAAD,EACP1F,mBAAS,CAAC2F,QAAS,GAAIC,QAAS,IADzB,mBAC1BpG,EAD0B,KACnBqG,EADmB,OAEL7F,mBAAS,CAAC2F,QAAS,GAAIC,QAAS,IAF3B,mBAE1BE,EAF0B,KAElBC,EAFkB,KAG3B/D,EAAQC,qBAAW9C,GACnB6G,EAAWC,mBA6FjB,OA3FAxG,qBAAU,WACN,GAAGuC,EAAMxC,MAAMP,QAAU+C,EAAMxC,MAAMV,QAAQoH,QAAO,SAACC,EAAIhJ,GAAL,OAAkC,IAApBA,EAAOS,SAAoBuI,EAAM,EAAIA,IAAI,KAAOnE,EAAMxC,MAAMV,QAAQ4D,OAAO,CACzI,IAAM0D,EAAO,GAEPC,EAAc,CAChB,KAAQ,EACR,KAAQ,EACR,IAAO,EACP,IAAO,EACP,MAAS,EACT,GAAM,GAGVrE,EAAMxC,MAAMV,QAAQ5B,SAAQ,SAAAC,IACD,IAApBA,EAAOS,UAA4C,OAAvBT,EAAOU,aAClCV,EAAOU,YAAYX,SAAQ,SAAAS,QACAwE,IAApBiE,EAAKzI,EAAO,IACXyI,EAAKzI,EAAO,IAAM,EAElByI,EAAKzI,EAAO,MAGbA,EAAO,GAAG2I,WAAW,YACpBD,EAAW,OACN1I,EAAO,GAAG2I,WAAW,UAC1BD,EAAW,MACN1I,EAAO,GAAG2I,WAAW,aAC1BD,EAAW,OACN1I,EAAO,GAAG2I,WAAW,OAC1BD,EAAW,KACN1I,EAAO,GAAG2I,WAAW,OAC1BD,EAAW,MACN1I,EAAO,GAAG2I,WAAW,UAC1BD,EAAW,cAM3B,IAAME,EAAiBC,OAAOb,QAAQS,GAAMK,MAAK,SAACC,EAAMC,GAAP,OAAeA,EAAM,GAAGD,EAAM,MACzEE,EAAwBJ,OAAOb,QAAQU,GAAaI,MAAK,SAACC,EAAMC,GAAP,OAAeA,EAAM,GAAGD,EAAM,MAC7Fb,GAAS,SAAAf,GAAC,kCACHA,GADG,IAENa,QAASY,EACTX,QAAUW,EAAcL,QAAO,SAACC,EAAIU,GAAL,OAAWV,EAAIU,EAAI,KAAG,QAEzDd,GAAU,SAAAjB,GAAC,kCACJA,GADI,IAEPa,QAASiB,EACThB,QAAUgB,EAAqBV,QAAO,SAACC,EAAIU,GAAL,OAAWV,EAAIU,EAAI,KAAG,WAIrE,CAAC7E,EAAMxC,MAAMV,UAEhBW,qBAAU,WACN,GAAGuG,GAAYA,EAASc,QAAQ,CAC5B,IAAMA,EAAUd,EAASc,QAAQC,WAAW,MACtCC,EAAW,IAAIC,IAAMH,EAAS,CAChC9J,KAAM,MACNK,KAAM,CACN6J,OAAQ1H,EAAMmG,QAAQpH,KAAI,SAAAqF,GAAI,OAAEA,EAAK,MACrCuD,SAAU,CAAC,CACP9J,KAAMmC,EAAMmG,QAAQpH,KAAI,SAAAqF,GAAI,OAAEA,EAAK,MACnCwD,gBAAiB3B,EACjB4B,YAAa,KAGjBC,QAAS,CACLC,OAAQ,CACJC,SAAS,GAEbC,YAAY,EAEZC,SAAU,CACNC,UAAW,CACHC,MAAO,SAACC,EAAaxK,GACrB,IAAMyK,EAAUzK,EAAK8J,SAASU,EAAYE,cACpCC,EAAQF,EAAQzK,KAAK6I,QAAO,SAAC+B,EAAeC,GAAhB,OAAgCD,EAAgBC,KAE5EA,EAAeJ,EAAQzK,KAAKwK,EAAYzK,OACxC+K,EAAa1H,KAAKC,MAAQwH,EAAaF,EAAS,IAAK,IAC3D,MAAM,GAAN,OAAU3K,EAAK6J,OAAOW,EAAYzK,OAAlC,cAA8C8K,EAA9C,qBAAuEC,EAAvE,YAKpB,OAAO,kBAAMnB,EAASoB,cAE5B,CAAC5I,IAGC,yBAAK6I,MAAM,cACP,4CAC0B,IAAzB7I,EAAMmG,QAAQjD,OAAe,2CAC1B,+BACI,+BACA,4BAAI,iCAAU,wCAAiB,sCAAe,sCAC7ClD,EAAMmG,QAAQpH,KAAI,SAACiH,EAAIpI,GACpB,OAAO,wBAAIgF,IAAKhF,GAAO,4BAAK8D,OAAOsE,EAAI,GAAGhG,EAAMoG,QAAQ,KAAKzE,QAAQ,GAA9C,KAAuD,4BAAKqE,EAAI,IAAQ,4BAAKA,EAAI,IAAQ,4BAAI,kBAAC,IAAD,CAAMlD,GAAIgG,UAAU,sBAAwB9C,EAAI,KAAhD,kBAMhI,yBAAKtD,GAAG,UAER,oDAE2B,IAA1B4D,EAAOH,QAAQjD,OAAe,2CAC3B,+BACI,+BACA,4BAAI,iCAAU,wCAAiB,uCAC9BoD,EAAOH,QAAQpH,KAAI,SAACiH,EAAIpI,GACrB,OAAO,wBAAIgF,IAAKhF,GAAO,4BAAK8D,OAAOsE,EAAI,GAAGM,EAAOF,QAAQ,KAAKzE,QAAQ,GAA/C,KAAwD,4BAAKqE,EAAI,IAAQ,4BAAKA,EAAI,UAMrH,yBAAKtD,GAAG,UAER,6BACI,4BAAQA,GAAG,UAAUqG,IAAKvC,MC1I1C,IAAMwC,EAAiB,CACnB,eAAe,SAAS,OAAO,SAAU,cAAc,kBAAkB,cAAc,aAAa,cAAc,gBAAiB,sBAAsB,mBAAmB,OAAO,SAAS,QAAQ,cAAe,SAAS,mBAAmB,qBAAqB,oBAAoB,sBAAsB,UAGnS,SAASC,IAAe,IAAD,EACRzI,mBAAS,CAC/B0I,SAAS,EACTxK,MAAO,KACP6B,UAAW,EACX4I,eAAgB,EAChBC,cAAe,EACfC,gBAAiB,KACjBC,eAAgB,OARc,mBAC3BtJ,EAD2B,KACpBqG,EADoB,KA8BlC,OAnBApG,qBAAU,WACNlC,MAAM,2CAA2CV,MAAK,SAAAW,GAAG,OAAEA,EAAIC,UAAQZ,MAAK,SAAAW,GACrEA,GAAOA,EAAIuC,UAAY,EACtB8F,GAAS,SAAAf,GAAC,8CAASA,GACAtH,GADT,IAEMmL,eAAgBnL,EAAIqL,gBAAgB3C,QAAO,SAACC,EAAK4C,GAAN,OAAY5C,EAAM4C,EAAE,KAAI,GACnEH,cAAepL,EAAIsL,eAAe5C,QAAO,SAACC,EAAK4C,GAAN,OAAY5C,EAAM4C,EAAE,KAAI,GACjEL,SAAS,OAGzB7C,GAAS,SAAAf,GAAC,kCAASA,GAAT,IAAY5G,MAAO,+BAAgCwK,SAAS,UAE3EvK,OAAM,SAAAK,GACLC,QAAQC,IAAIF,GACZqH,GAAS,SAAAf,GAAC,kCAASA,GAAT,IAAY5G,MAAO,qCAAsCwK,SAAS,YAElF,IAIE,yBAAKL,MAAM,cACP,gDAEC7I,EAAMkJ,QAAU,uCACblJ,EAAMtB,MAAQ,qFACV,oCACA,+BACI,+BACMsB,EAAMqJ,gBACJ,oCACI,4BAAI,iCAAU,oCAAa,uCAC1BrJ,EAAMqJ,gBAAgBtK,KAAI,SAACyK,EAAK5L,GAC7B,OAAQ,wBAAIgF,IAAKhF,GACT,4BAAK8D,OAAO8H,EAAI,GAAGxJ,EAAMmJ,eAAe,KAAKxH,QAAQ,GAArD,KACA,4BAAK6H,EAAI,IACT,4BAAKA,EAAI,SAPH,4BAAI,sCAetC,uDACA,+BACI,+BACMxJ,EAAMsJ,eACJ,oCACI,4BAAI,iCAAU,oCAAa,uCAC1BtJ,EAAMsJ,eAAevK,KAAI,SAACyK,EAAK5L,GAC5B,OAAQ,wBAAIgF,IAAKhF,GACT,4BAAK8D,OAAO8H,EAAI,GAAGxJ,EAAMmJ,eAAe,KAAKxH,QAAQ,GAArD,KACA,6BAAiB,IAAZ6H,EAAI,GAAY,UAAYR,EAAevI,SAAS+I,EAAI,MAAQ,KACrE,4BAAKA,EAAI,SAPJ,4BAAI,sCAerC,oEAAyC,6BAAzC,iBAA6D,IAAIhL,KAAKwB,EAAMO,WAAW0D,kBC5E3G,IAAMwF,EAAkB,CACvB,0BAA6B,CACtB5G,KAAM,8BAEb,sBAAyB,CAClBA,KAAM,YACN6G,QAAS,KAEhB,kBAAqB,CACd7G,KAAM,sBAEb,eAAkB,CACXA,KAAM,2BAEb,UAAa,CACNA,KAAM,cAEb,gBAAmB,CACZA,KAAM,oBAIC,SAAS8G,IAAU,IAAD,EACHnJ,mBAAS,CAC/B0I,SAAS,EACTxK,MAAO,KACPb,KAAM,KACN0C,UAAW,IALc,mBACtBP,EADsB,KACfqG,EADe,KAuB7B,OAfApG,qBAAU,WACNlC,MAAM,wCACLV,MAAK,SAAAW,GAAG,OAAEA,EAAIC,UACdZ,MAAK,SAAAW,GACFqI,GAAS,SAAAf,GAAC,kCAAUA,GAAV,IACM4D,SAAS,GACNlL,SAEtBW,OAAM,SAAAK,GACHC,QAAQC,IAAIF,GACZqH,GAAS,SAAAf,GAAC,kCAASA,GAAT,IAAY5G,MAAO,oCAGlC,IAEK,yBAAKmK,MAAM,cACP,mDACC7I,EAAMkJ,SAAW,uCACjBlJ,EAAMtB,OAAS,qCAA2B,OAAhBsB,EAAMtB,MAAiB,GAAK,KAAOsB,EAAMtB,MAApD,KACfsB,EAAMnC,MAAQ,wCACXmJ,OAAOb,QAAQnG,EAAMnC,MAAMkB,KAAI,SAAA6K,GAAW,OAAI,yBAAKhH,IAAKgH,EAAY,IAChE,yBAAKlH,GAAG,UACR,4BAAK+G,EAAgBG,EAAY,IAAMH,EAAgBG,EAAY,IAAI/G,KAAO+G,EAAY,IAC1F,+BACI,+BACI,4BACI,iCACA,sCACA,sCAGFA,EAAY,IAAgC,IAA1BA,EAAY,GAAG1G,OAO/B0G,EAAY,GAAG7K,KAAI,SAACZ,EAAQP,GAAT,OACf,wBAAIgF,IAAKhF,EAAOmF,MAAO5E,EAAO0L,SAAW,IAAM1L,EAAO2L,SAClD,4BAAKlM,EAAM,GACX,4BAAKO,EAAO0L,UACZ,4BAAKJ,EAAgBG,EAAY,KAAOH,EAAgBG,EAAY,IAAIF,QAAUD,EAAgBG,EAAY,IAAIF,QAAU,GAAIhI,OAAOvD,EAAO4L,QAAQC,sBAV9J,4BACI,iCACA,mCACA,wCAcpB,8DAAmC,6BAAnC,iBAAuD,IAAIxL,KAAKwB,EAAMO,WAAW0D,kBC7EtF,SAASgG,IAAS,IAAD,EACFzJ,mBAAS,CAACgI,MAAO,EAAG0B,OAAQ,IAD1B,mBACrBlK,EADqB,KACdqG,EADc,KAEtB7D,EAAQC,qBAAW9C,GA4BzB,OAtBAM,qBAAU,WACNoG,GAAS,SAAAf,GACL,IAAIhG,EAAU,EACVpB,EAAU,EAQd,OANCsE,EAAMxC,MAAMV,SAAW,IAAI5B,SAAQ,SAAAC,GAC5BA,EAAOS,UAAaT,EAAOW,aAC/BgB,IACG3B,EAAOU,cAAaH,GAAWP,EAAOU,YAAY6E,YAGlD,YAAC,eACDoC,GADP,IAEIkD,MAAOhG,EAAMxC,MAAMV,QAAQ4D,OAC3B5D,UACApB,iBAKV,CAACsE,EAAMxC,MAAMV,UAGX,yBAAKoD,GAAG,UACJ,2BAAOlF,KAAK,SAAS4C,MAAK,0BAAqBJ,EAAMV,QAA3B,YAAsCU,EAAMwI,MAA5C,8BAAuExI,EAAM9B,QAA7E,uBAA2GqD,UAAU,oBAAoBC,QA5B3K,WACIlE,IAAiBkF,EAAMjF,c,YCNhB,SAAS4M,IACpB,IAAM3H,EAAQC,qBAAW9C,GAErByK,EAAe,GAEnB5H,EAAMxC,MAAMV,QAAQ5B,SAAQ,SAACC,EAAQC,GAAW,IAAD,EACxCD,EAAOU,cAAa,EAAA+L,GAAa/E,KAAb,oBAAqB1H,EAAOU,iBAWvD,IAAMgM,GARND,EAAeA,EACEnD,MAAK,SAACqD,EAAEC,GAAH,OAASA,EAAE,GAAKD,EAAE,MACvBvL,KAAI,SAAClB,EAAMD,GAAP,MAAkB,CACfA,MAAOA,EAAM,EACbiF,KAAMhF,EAAK,GACX6E,GAAI7E,EAAK,QAGDqF,OAAS,GAAtB,sBAEQkH,EAAa5K,OAAO,EAAG,KAF/B,CAGK,CACI5B,MAAO,MACPiF,KAAM,MACNH,GAAI,QANb,YAQQ0H,EAAa5K,OAAO4K,EAAalH,OAAO,MAC3CkH,EAExB,OAA0B,IAAvB5H,EAAMxC,MAAMP,OACJ,uCAGH,6BACI,8EACA,+BACI,+BACI,4BAAI,iCAAU,oCAAa,mCACJ,IAAtB4K,EAAWnH,OAAe,4BAAI,6BAAS,gDAAyB,8BAE7DmH,EAAWtL,KAAI,SAACZ,EAAQP,GAAT,OACX,wBAAIgF,IAAKhF,EAAO0E,MAAiB,IAAV1E,EAAc,CAAC4M,SAAU,OAAS,IACrD,gCAAMrM,EAAOP,OACb,4BAAI,2BAAIO,EAAO0E,KAAO1E,EAAO0E,KAAO,MACpC,4BAAK1E,EAAOuE,WC5BjC,SAAS+H,IAKtB,OAJAC,IAAMzK,WAAU,WACd0K,SAAS5H,MAAQ,8CACjB,IAGA,kBAAC,IAAD,CAAQ6H,SAAS,KAEf,kBAAC,EAAD,KACE,yBAAKlI,GAAG,UACN,4BACE,4BAAI,kBAAC,IAAD,CAAMI,GAAG,KAAT,mBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,iBAAT,kBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,aAAT,kBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,cACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,eAAT,wBAKR,yBAAKJ,GAAG,WACN,kBAAC,IAAD,CAAOmI,UACL,SAACvH,GACC,IAAME,EAAMF,EAAMwH,SAASC,OAAO7I,MAAM,KACxC,OAAOsB,EAAI,IACT,IAAM,GACN,IAAM,UACJ,OAAO,kBAACjB,EAAD,MACT,IAAM,cACJ,OAAO,kBAACc,EAAD,CAAYG,IAAKA,IAC1B,IAAM,QACJ,OAAO,kBAAC0C,EAAD,MACT,IAAM,YACJ,OAAO,kBAAC+C,EAAD,MACT,IAAM,SACJ,OAAO,kBAAC,EAAD,MACT,IAAM,gBACJ,OAAO,kBAAC,EAAD,CAAczF,IAAKA,IAC5B,IAAM,cACJ,OAAO,kBAAC2G,EAAD,MACT,QACE,OAAO,kBAAC,IAAD,CAAUrH,GAAG,WAK9B,kBAAC,EAAD,Q,OCxDRkI,IAASC,OAAO,kBAACR,EAAD,MAASE,SAASO,eAAe,W","file":"static/js/main.68447972.chunk.js","sourcesContent":["import servers_list from \"./serverslist.json\";\r\n\r\nconst timeout = promise => new Promise(function(resolve, reject) {\r\n    setTimeout(() => reject(new Error(\"timeout\")), 4000);\r\n    promise.then(resolve, reject);\r\n});\r\n\r\nexport const initAllServers = () => dispatch => {\r\n    dispatch({type: \"CLEARSERVERSLIST\"})\r\n\r\n    servers_list.forEach((server,index) => {\r\n        dispatch({\r\n            type: \"ADDSERVER\",\r\n            data: {\r\n                \"error\": null,\r\n                \"isLoaded\": false,\r\n                \"ip\": server[0],\r\n                \"name\": server[1],\r\n                \"playersData\": null,\r\n                \"serverData\": null,\r\n                \"lastUpdate\": null,\r\n                \"vehicleData\": null,\r\n                \"directIp\": server[2]\r\n            },\r\n            index\r\n        })\r\n        fetchServer(server,index)(dispatch);\r\n    });\r\n\r\n    dispatch({type: \"SERVERSINITED\"});\r\n};\r\n\r\nexport const fetchServer = (server, index) => dispatch => {\r\n    timeout( fetch(\"http://\"+server[0]+\"/status/widget/players.json\").then(res => res.json()) ).then(res => {\r\n            res.players.forEach(player=>{if(player[5] === \"\") player[5] = \"Unemployed\";});\r\n            // res.server[\"dxp\"] = [true, 'gasdg', 3600000 + (Math.random()*20000), 1]\r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    isLoaded: true,\r\n                    playersData: res.players,\r\n                    serverData: res.server,\r\n                    lastUpdate: Date.now()\r\n                },\r\n                index\r\n            })\r\n        },() => {\r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    isLoaded: true,\r\n                    error: true,\r\n                    lastUpdate: Date.now()\r\n                },\r\n                index\r\n            })\r\n        }\r\n    ).catch(() => {\r\n        dispatch({\r\n            type: \"UPDATESERVER\",\r\n            data: {\r\n                isLoaded: true,\r\n                error: true,\r\n                lastUpdate: Date.now()\r\n            },\r\n            index\r\n        })\r\n})}\r\n\r\nexport const fetchDetailedServer = (server, index) => dispatch => {\r\n    timeout(\r\n        fetch(\"http://\"+server.ip+\"/status/map/positions.json\")\r\n        .then(res => res.json()))\r\n        .then(res => {\r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    vehicleData: res.players.map(player=>player[4])\r\n                },\r\n                index\r\n            });\r\n    }).catch((err)=>console.log(err))\r\n}","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport * as dispatch_list from \"./fetchdata.js\"\r\n\r\nconst reducer = (data, action) => {\r\n    switch(action.type){\r\n        case (\"ADDSERVER\"):\r\n            const tempArray = data.servers.slice();\r\n            tempArray.splice(action.index, 0, action.data);\r\n            data.servers = tempArray;\r\n            return {...data};\r\n\r\n        case (\"SERVERSINITED\"):\r\n            return {...data, inited: true};\r\n\r\n        case (\"UPDATESERVER\"):\r\n            data.servers = data.servers.map((data, index) => index !== action.index ? data : {\r\n                  ...data,\r\n                  ...action.data\r\n                });\r\n            return {...data};\r\n\r\n        case (\"CLEARSERVERSLIST\"):\r\n            data.servers = [];\r\n            return {...data};\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    servers: [],\r\n    inited: false\r\n}\r\n\r\nexport const StoreContext = createContext(initialState);\r\n\r\nexport const StoreProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    useEffect(() => {\r\n        dispatch_list.initAllServers()(dispatch)\r\n    }, []);\r\n\r\n    return (\r\n        <StoreContext.Provider value={{state, dispatch, dispatch_list}}>\r\n            {children}\r\n        </StoreContext.Provider>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nconst dxpalert = (dxp, timestamp) => {\r\n    if(!dxp || !timestamp) return;\r\n    alert(`Host: ${dxp[1]}\\nDXP Ends: ${new Date(timestamp + dxp[2])}\\nAdditional Time: ${dxp[3] ? Number(dxp[3]/1000/60).toFixed(1) + ' min' : '-'}`);\r\n}\r\n\r\nexport default function DxpClock ({dxp, timestamp}) {\r\n    const [time, setTime] = useState(  parseInt((timestamp + dxp[2] - Date.now())/1000)  );\r\n\r\n    useEffect(()=>{\r\n        const interval = setInterval(()=>{\r\n            setTime(t => {\r\n                if(t <= 1) clearInterval(interval);\r\n                return t-1;\r\n            });\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const HH = Math.floor(time / 3600);\r\n    const divisor_for_minutes = time % 3600;\r\n    const MM = Math.floor(divisor_for_minutes / 60);\r\n    const SS = Math.ceil(divisor_for_minutes % 60);\r\n    return (<>{time < 1 ? '-' : \r\n                <span className=\"dxpcursor\" onClick={()=>dxpalert(dxp, timestamp)}>\r\n                    {HH?HH+'h ':''} \r\n                    {MM?MM+'m ': HH?'0m ':''} \r\n                    {SS?SS+'s':'0s'}\r\n                </span>}\r\n            </>);\r\n}","import React from \"react\";\r\n\r\nconst notify = () => alert(\"Servers usually restarts every 18 hours\");\r\n\r\nexport default function Uptime ({time}) {\r\n    const timeObj = { h: 0, m: 0 }\r\n\r\n    time.split(\" \").forEach(t => {\r\n        if(t.endsWith(\"m\")){\r\n            timeObj.m = parseInt(t.replace(\"m\",\"\"));\r\n        }else if(t.endsWith(\"h\")){\r\n            timeObj.h = parseInt(t.replace(\"h\",\"\"));\r\n        }\r\n    });\r\n\r\n    const color =   timeObj.h === 17 && timeObj.m < 45 ? \"yellow\" : \r\n                    timeObj.h >= 17 ? \"red\" : null;\r\n\r\n    return (<span className=\"dxpcursor\" onClick={notify} style={color ? {color} : {}}>{time}</span>)\r\n}","import React, { useContext } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DxpClock from \"./DxpClock\";\r\nimport Uptime from \"./Uptime\";\r\n\r\nexport default function ServersStatus(){\r\n    const store = useContext(StoreContext);\r\n\r\n    return (\r\n        <div id=\"servers-status\">\r\n            <h2>Transport Tycoon Servers List</h2>\r\n            <table>\r\n                <tbody>\r\n                <tr><th>Connect</th><th>Players</th><th>Status</th><th>Uptime</th><th>DXP</th></tr>\r\n                {store.state.servers.map((server,index)=>{\r\n\r\n                    if (server.error || server.playersData === undefined || server.isLoaded === false) {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{server.ip}<br/><b>{server.name}</b></td>\r\n                                <td>-/-</td>\r\n                                {server.isLoaded === false ? \r\n                                    <td className=\"loading\">Loading</td> : \r\n                                    <td className=\"offline\">\r\n                                        <Link to={\"/?serverinfo=\"+(+index+1)} className=\"btn btn-primary\" title=\"Server Info\">OFFLINE</Link>\r\n                                    </td>}\r\n                                <td>-</td>\r\n                                <td className=\"dxp\">-</td>\r\n                            </tr>\r\n                        );\r\n                    } else {\r\n                        const dxp = server['serverData']['dxp'];\r\n                        const isDxpActive = dxp !== undefined && dxp[0] === true;\r\n                        \r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>\r\n                                    <a href ={\"fivem://connect/\" + server.ip} title=\"Connect to the server\">{server.ip}</a><br/>\r\n                                    <b>{server.name}</b>\r\n                                </td>\r\n                                <td><Link to={\"/?serverinfo=\"+(+index+1)} className=\"btn btn-primary\" title=\"Server Info\">{server.playersData.length}/{server.serverData.limit}</Link></td>\r\n                                <td className=\"online\">ONLINE</td>\r\n                                <td>{server.serverData ? <Uptime time={server.serverData.uptime}/> : '-'}</td>\r\n                                <td className=\"dxp\">{isDxpActive ? <DxpClock dxp={dxp} timestamp={server.lastUpdate}/> : <>-</>}</td>\r\n                            </tr>\r\n                        );\r\n                    }\r\n                })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}","import React, { useContext } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function ServerInfo (props) {\r\n    const store = useContext(StoreContext);\r\n    const urlprop = parseInt(props.url[1])\r\n\r\n    if(!urlprop || isNaN(urlprop)){\r\n        return <h2>URL ERROR</h2>;\r\n    }\r\n\r\n    const server = store.state.servers[urlprop-1];\r\n    if(store.state.inited === false){\r\n        return <h2>Loading</h2>;\r\n    }else if(server === undefined){\r\n        return <h2>SERVER ERROR</h2>;\r\n    }else{\r\n        return (\r\n            <div>\r\n                <h2>\r\n                    Name: {server.name}<br/>\r\n                    IP: <a href ={\"fivem://connect/\" + server.ip}>{server.ip}</a><br/>\r\n                    {server.serverData ? \r\n                        <>\r\n                            Uptime: {server.serverData.uptime}<br/>\r\n                            Players: {server.playersData ? server.playersData.length : 0}/{server.playersData ? server.serverData.limit : 0}\r\n                        </> :\r\n                        <>Server Is Offline</>\r\n                    }<br/>\r\n                    <img src={\"https://www.game-state.com/\" + server.directIp + \"/stats.png\"} alt=\"\" className=\"statsimg-1\" referrerpolicy=\"no-referrer\"/><br/>\r\n                    <img src={\"https://www.game-state.com/\" + server.directIp + \"/n-560x95_FFFFFF_FFFFFF_000000_000000.png\"} alt=\"\" className=\"statsimg-2\" referrerpolicy=\"no-referrer\"/><br/>\r\n                    <Link to=\"/\" className=\"refresh dxpcursor\">Back</Link>\r\n                </h2>\r\n\r\n                {!server.playersData || server.playersData.length === 0 ? <h2>No Players</h2> : <>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr><th>Avatar</th><th>#</th><th>Name</th><th>ID</th><th>Job</th></tr>\r\n                            {server.playersData.map((player,index) => (\r\n                            <tr key={index}>\r\n                                <td>\r\n                                    {player[3] ? \r\n                                        <a href={player[3]} target=\"_blank\" rel=\"noopener noreferrer\"><img src={player[3] || \"#\"} height=\"50px\" alt=\"img\" className=\"avatar\"/></a> : \r\n                                        <div className=\"no-avatar\"/>}\r\n                                </td>\r\n                                <td>#{index+1}</td>\r\n                                <td><b>{player[0]}</b></td>\r\n                                <td>{player[2]}</td>\r\n                                <td>{player[5] || \"-\"}</td>\r\n                            </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </>}\r\n            <h2>Last Updated: {new Date(server.lastUpdate).toTimeString()}</h2>\r\n        </div>\r\n        );\r\n    }\r\n}","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\n\r\nconst showAvatar = false;\r\n\r\nexport default function PlayersList (props) {\r\n    const store = useContext(StoreContext);\r\n    var jobselectURL;\r\n\r\n    if(props.url.length>1){\r\n        props.url.forEach(item=>{\r\n            const data = item.split(\":\");\r\n            if(data[0] === \"job\"){\r\n                jobselectURL = decodeURI(data[1]);\r\n            }\r\n        })\r\n    }\r\n\r\n    const [localState, setlocalState] = useState({\r\n        playerFinderMessages: [],\r\n        playerFinderInputField: \"\",\r\n        playerFinderFound: [],\r\n        serverSelect: \"All Servers\",\r\n        jobSelect: jobselectURL || \"All Jobs\"\r\n    });\r\n\r\n    const [jobList, setJobList] = useState([])\r\n\r\n    const handlePlayersNameInput = (input) => {\r\n        const value = input.target.value;\r\n        setlocalState(s => ({...s, playerFinderInputField: value }));\r\n    }\r\n\r\n    const handleServerSelect = (input) => {\r\n        const value = input.target.value;\r\n        setlocalState(s => ({...s, serverSelect: value }));\r\n    }\r\n\r\n    const handleJobSelect = (input) => {\r\n        const value = input.target.value;\r\n        setlocalState(s => ({...s, jobSelect: value }));\r\n    }\r\n\r\n    const _handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            handlePlayerFinderSubmit();\r\n        }\r\n    }\r\n\r\n    const handlePlayerFinderSubmit = (isButton = true) => {\r\n        const input = localState.playerFinderInputField.toLowerCase()\r\n        const playerFinderFound = [];\r\n        store.state.servers.forEach(server=>{\r\n            if(server.playersData === null)return;\r\n            server.playersData.forEach(player=>{\r\n                const playername = (player[0]+\"#\"+player[2]);\r\n                if(playername.toLowerCase().includes(input) && \r\n                    (localState.serverSelect === \"All Servers\" || localState.serverSelect === server.name) &&\r\n                    (localState.jobSelect === \"All Jobs\" || localState.jobSelect === player[5])){\r\n                        playerFinderFound.push([\r\n                            playername,\r\n                            server[\"ip\"],\r\n                            server[\"name\"],\r\n                            player[3],\r\n                            player[5]\r\n                        ])\r\n                    }\r\n            })\r\n        })\r\n\r\n        setlocalState(s=>(\r\n            playerFinderFound.length > 0 ? \r\n                    {   ...s,\r\n                        playerFinderMessages: \"Found \" + playerFinderFound.length + \" player\" +(playerFinderFound.length === 1 ?\"\":\"s\"),\r\n                        playerFinderFound\r\n                    } : {\r\n                        ...s,\r\n                        playerFinderMessages: isButton ? \"Found nothing\" : \"...\",\r\n                        playerFinderFound: []\r\n                    }\r\n            )\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const tempJobsList = []\r\n        store.state.servers.forEach(server=>{\r\n            if(server.playersData){\r\n                server.playersData.forEach(player=>{\r\n                    if(!tempJobsList.includes(player[5])){\r\n                        tempJobsList.push(player[5]);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        setJobList(tempJobsList)\r\n        handlePlayerFinderSubmit(false);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [store.state.servers])\r\n  \r\n    return (\r\n        <div id=\"player-finder\">\r\n            <h2>Online Player Finder</h2>\r\n            <div id=\"form\">\r\n                <form>\r\n                    <input type=\"text\" placeholder=\"Player's name or in-game id\" onChange={(input)=>handlePlayersNameInput(input)} onKeyDown={_handleKeyDown}/>\r\n                    <div>\r\n                        <label htmlFor=\"serverSelector\">Filter Server</label>\r\n                        <select id=\"serverSelector\" onChange={handleServerSelect} value={localState.serverSelect}>\r\n                            <option value=\"All Servers\">All Servers</option>\r\n                            {store.state.servers.map((server,index)=>\r\n                                server.isLoaded ? <option key={index} value={server.name}>{server.name}</option> : \"\")}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"jobSelector\">Filter Job</label>\r\n                        <select id=\"jobSelector\" onChange={(input)=>handleJobSelect(input)} value={localState.jobSelect}> \r\n                            <option value=\"All Jobs\">All Jobs</option>\r\n                            {jobList.map((job,index)=>\r\n                                <option key={index} value={job}>{job}</option>)}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <input type=\"button\" value=\"search\" onClick={()=>handlePlayerFinderSubmit()}/>\r\n                </form>\r\n            </div>\r\n\r\n            <h2>{localState.playerFinderMessages}</h2>\r\n\r\n            {!localState.playerFinderFound ? \"\" :\r\n                <table>\r\n                    <tbody>\r\n                        {localState.playerFinderFound.map((player,index)=>\r\n                        \r\n                            <tr key={index}>\r\n                                <td>{player[3] && showAvatar === true ? //todo \r\n                                    <a href={player[3]} target=\"_blank\" rel=\"noopener noreferrer\"><img src={player[3] || \"#\"} height=\"50px\" alt=\"img\" className=\"avatar\"/></a> : \r\n                                    <div className=\"no-avatar\"/>\r\n                                }</td>\r\n                                <td>#{index+1}</td>\r\n                                <td><b>{player[0]}</b></td>\r\n                                <td>{player[4] || \"-\"}</td>\r\n                                <td><a href ={\"fivem://connect/\" + player[1]} title=\"connect\">{player[1]}</a><br/><b>{player[2]}</b></td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n    </div>\r\n    )\r\n}","import React, { useContext, useEffect, useState, useRef } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Chart from \"chart.js\";\r\n\r\nconst colorArray = [\r\n    \"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\"#ADD8E6\",\"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\r\n    \"#ADD8E6\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\"#ADD8E6\",\"#FF0000\",\"#00FF00\",\"#800000\",\"#00FFFF\",\"#000000\",\"#B8860B\",\"#4B0082\",\"#FFDEAD\",\"#8B4513\",\"#A52A2A\",\"#B22222\",\"#228B22\",\"#008B8B\",\"#BA55D3\",\"#F0F8FF\",\"#FF8C00\",\"#FF69B4\",\"#FFA07A\",\"#C71585\",\"#FFF8DC\",\"#F0FFF0\",\"#FFFFFF\",\"#00FF7F\",\"#0000FF\",\"#FFF5EE\",\"#2F4F4F\",\"#006400\",\"#9966CC\",\"#FF6347\",\r\n    \"#ADD8E6\"\r\n];\r\n\r\nexport default function JobsStats () {\r\n    const [state, setState] = useState({entries: [], counter: 0});\r\n    const [state2, setState2] = useState({entries: [], counter: 0});\r\n    const store = useContext(StoreContext);\r\n    const chartRef = useRef();\r\n    \r\n    useEffect(() => {\r\n        if(store.state.inited && store.state.servers.reduce((acc,server)=>server.isLoaded === true ? acc + 1 : acc,0) === store.state.servers.length){\r\n            const jobs = {}\r\n\r\n            const companyjobs = {\r\n                \"COCO\": 0,\r\n                \"PIGS\": 0,\r\n                \"RTS\": 0,\r\n                \"BAT\": 0,\r\n                \"FRLLC\": 0,\r\n                \"IA\": 0\r\n            }\r\n\r\n            store.state.servers.forEach(server=>{\r\n                if(server.isLoaded === true && server.playersData !== null){\r\n                    server.playersData.forEach(player=>{\r\n                        if(jobs[player[5]] === undefined){\r\n                            jobs[player[5]] = 1;\r\n                        }else{\r\n                            jobs[player[5]]++;\r\n                        }\r\n\r\n                        if(player[5].startsWith(\"P.I.G.S.\")){\r\n                            companyjobs[\"PIGS\"]++;\r\n                        }else if(player[5].startsWith(\"R.T.S.\")){\r\n                            companyjobs[\"RTS\"]++;\r\n                        }else if(player[5].startsWith(\"CollinsCo\")){\r\n                            companyjobs[\"COCO\"]++;\r\n                        }else if(player[5].startsWith(\"IA \")){\r\n                            companyjobs[\"IA\"]++;\r\n                        }else if(player[5].startsWith(\"BAT\")){\r\n                            companyjobs[\"BAT\"]++;\r\n                        }else if(player[5].startsWith(\"FRLLC\")){\r\n                            companyjobs[\"FRLLC\"]++;\r\n                        }\r\n\r\n                    })\r\n                }\r\n            })\r\n            const sortedEntries = (Object.entries(jobs).sort((item1,item2)=>item2[1]-item1[1]));\r\n            const sortedEntriesCompany = (Object.entries(companyjobs).sort((item1,item2)=>item2[1]-item1[1]));\r\n            setState(s => ({\r\n                ...s,\r\n                entries: sortedEntries,\r\n                counter: (sortedEntries.reduce((acc,val)=>acc+val[1],0))\r\n            }))\r\n            setState2(s => ({\r\n                ...s,\r\n                entries: sortedEntriesCompany,\r\n                counter: (sortedEntriesCompany.reduce((acc,val)=>acc+val[1],0))\r\n            }))\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [store.state.servers]); \r\n\r\n    useEffect(()=>{\r\n        if(chartRef && chartRef.current){\r\n            const current = chartRef.current.getContext(\"2d\");\r\n            const instance = new Chart(current, {\r\n                type: 'pie',\r\n                data: {\r\n                labels: state.entries.map(item=>item[0]),\r\n                datasets: [{\r\n                    data: state.entries.map(item=>item[1]),\r\n                    backgroundColor: colorArray,\r\n                    borderWidth: 0\r\n                }]\r\n                },\r\n                options: {\r\n                    legend: {\r\n                        display: false\r\n                    },\r\n                    responsive: true,\r\n            \r\n                    tooltips: {\r\n                        callbacks: {\r\n                                label: (tooltipItem, data) => {\r\n                                const dataset = data.datasets[tooltipItem.datasetIndex];\r\n                                const total = dataset.data.reduce((previousValue, currentValue)=> previousValue + currentValue);\r\n            \r\n                                const currentValue = dataset.data[tooltipItem.index];\r\n                                const percentage = Math.floor(((currentValue/total) * 100)+0.5);\r\n                                return `${data.labels[tooltipItem.index]} - ${currentValue} players (${percentage}%)`;\r\n                                }\r\n                            }\r\n                        } \r\n                }});\r\n            return () => instance.destroy();\r\n        }\r\n    },[state]);\r\n\r\n    return (\r\n        <div class=\"with-table\">\r\n            <h2>Top Jobs Now</h2>\r\n            {state.entries.length === 0 ? <div>Loading...</div> : \r\n                <table>\r\n                    <tbody>\r\n                    <tr><th>%</th><th>Job Name</th><th>Active</th><th>Links</th></tr>\r\n                    {state.entries.map((job,index)=>{\r\n                        return <tr key={index}><td>{Number(job[1]/state.counter*100).toFixed(1)}%</td><td>{job[0]}</td><td>{job[1]}</td><td><Link to={encodeURI(\"/?playerfinder=job:\" + job[0])}>Players</Link></td></tr>\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n            \r\n            <div id=\"split\"/>\r\n            \r\n            <h2>Top Company Jobs Now</h2>\r\n\r\n            {state2.entries.length === 0 ? <div>Loading...</div> : \r\n                <table>\r\n                    <tbody>\r\n                    <tr><th>%</th><th>Job Name</th><th>Active</th></tr>\r\n                    {state2.entries.map((job,index)=>{\r\n                        return <tr key={index}><td>{Number(job[1]/state2.counter*100).toFixed(1)}%</td><td>{job[0]}</td><td>{job[1]}</td></tr>\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n\r\n            <div id=\"split\"/>\r\n\r\n            <div>\r\n                <canvas id=\"myChart\" ref={chartRef}></canvas>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst VehicleClasses = [\r\n    \"Compact Cars\",\"Sedans\",\"SUVs\",\"Coupes\", \"Muscle Cars\",\"Sports Classics\",\"Sports Cars\",\"Super Cars\",\"Motorcycles\",\"Off-road Cars\", \"Industrial Vehicles\",\"Utility Vehicles\",\"Vans\",\"Cycles\",\"Boats\",\"Helicopters\", \"Planes\",\"Service Vehicles\",\"Emergency Vehicles\",\"Military Vehicles\",\"Commercial Vehicles\",\"Trains\",\r\n];\r\n\r\nexport default function VehicleStats(){\r\n    const [state, setState] = useState({\r\n        loading: true,\r\n        error: null,\r\n        timestamp: 0,\r\n        total_vehicles: 0,\r\n        total_classes: 0,\r\n        sorted_vehicles: null,\r\n        sorted_classes: null,\r\n    });\r\n\r\n    useEffect(()=>{\r\n        fetch(\"https://novaplus.herokuapp.com/vehicles\").then(res=>res.json()).then(res=>{\r\n            if(res && res.timestamp > 0){\r\n                setState(s => ({...s, \r\n                                ...res,\r\n                                total_vehicles: res.sorted_vehicles.reduce((acc, v) => acc + v[1], 0),\r\n                                total_classes: res.sorted_classes.reduce((acc, v) => acc + v[1], 0),\r\n                                loading: false\r\n                            }));\r\n            }else{\r\n                setState(s => ({...s, error: \"Error while loading the data\", loading: false}));\r\n            }\r\n        }).catch(err=>{\r\n            console.log(err);\r\n            setState(s => ({...s, error: \"Error while state.loading the data\", loading: false}));\r\n        })\r\n    },[])\r\n\r\n    \r\n    return (\r\n        <div class=\"with-table\">\r\n            <h2>Top Vehicles Now</h2>\r\n\r\n            {state.loading ? <h2>Loading</h2> : \r\n                state.error ? <h2>Error while trying to load the data, try again later.</h2> :\r\n                    <>\r\n                    <table>\r\n                        <tbody>\r\n                            {!state.sorted_vehicles ? <tr><td>N/A</td></tr> :\r\n                                <>\r\n                                    <tr><th>%</th><th>Name</th><th>Active</th></tr>\r\n                                    {state.sorted_vehicles.map((veh, index) => {\r\n                                        return (<tr key={index}>\r\n                                                <td>{Number(veh[1]/state.total_vehicles*100).toFixed(2)}%</td>\r\n                                                <td>{veh[0]}</td>\r\n                                                <td>{veh[1]}</td>\r\n                                            </tr>)\r\n                                    })}\r\n                                </>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <h2>Top Vehicle Classes Now</h2>\r\n                    <table>\r\n                        <tbody>\r\n                            {!state.sorted_classes ? <tr><td>N/A</td></tr> :\r\n                                <>\r\n                                    <tr><th>%</th><th>Name</th><th>Active</th></tr>\r\n                                    {state.sorted_classes.map((veh, index) => {\r\n                                        return (<tr key={index}>\r\n                                                <td>{Number(veh[1]/state.total_vehicles*100).toFixed(2)}%</td>\r\n                                                <td>{veh[0] === -1 ? \"On Foot\" : VehicleClasses[parseInt(veh[0])] || \"?\"}</td>\r\n                                                <td>{veh[1]}</td>\r\n                                            </tr>)\r\n                                    })}\r\n                                </>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <h3>Vehicle stats updates every 5 minutes<br/>Last Updated: {new Date(state.timestamp).toTimeString()}</h3>\r\n                    </>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nconst top10_job_names = {\r\n\t\"firefighter_streak_record\": {\r\n        name: \"Firefighter Mission Streak\"\r\n    },\r\n\t\"omni_void_leaderboard\": {\r\n        name: \"Omni Void\",\r\n        prepend: \"$\"\r\n    },\r\n\t\"ems_streak_record\": {\r\n        name: \"EMS Mission Streak\"\r\n    },\r\n\t\"houses_crafted\": {\r\n        name: \"Most Houses Constructed\"\r\n    },\r\n\t\"toll_paid\": {\r\n        name: \"Tolls Paid\"\r\n    },\r\n\t\"drops_collected\": {\r\n        name: \"Drops Collected\"\r\n    }\r\n};\r\n\r\nexport default function Top10 () {\r\n    const [state, setState] = useState({\r\n        loading: true,\r\n        error: null,\r\n        data: null,\r\n        timestamp: 0\r\n    });\r\n\r\n    useEffect(()=>{\r\n        fetch(\"https://novaplus.herokuapp.com/top10\")\r\n        .then(res=>res.json())\r\n        .then(res=>{\r\n            setState(s => ({ ...s, \r\n                            loading: false,\r\n                            ...res}))\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n            setState(s => ({...s, error: \"Failed to load the data\"}))\r\n        })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    \r\n    return (<div class=\"with-table\">\r\n                <h2>Top 10 Leaderboards</h2>\r\n                {state.loading && <h2>Loading</h2>}\r\n                {state.error && <h2>Error {state.error === null ? \"\" : \"- \" + state.error} </h2>}\r\n                {state.data && <> {\r\n                    Object.entries(state.data).map(leaderboard => <div key={leaderboard[0]}>\r\n                        <div id=\"split\"/>\r\n                        <h2>{top10_job_names[leaderboard[0]] ? top10_job_names[leaderboard[0]].name : leaderboard[0]}</h2>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Player</th>\r\n                                    <th>Score</th>\r\n                                </tr>\r\n\r\n                                {!leaderboard[1] || leaderboard[1].length === 0 ? \r\n                                    <tr>\r\n                                        <td>-</td>\r\n                                        <td>N/A</td>\r\n                                        <td>-</td>\r\n                                    </tr> : \r\n\r\n                                    leaderboard[1].map((player, index) => \r\n                                        <tr key={index} title={player.username + \"#\" + player.user_id}>\r\n                                            <td>{index+1}</td>\r\n                                            <td>{player.username}</td>\r\n                                            <td>{top10_job_names[leaderboard[0]] && top10_job_names[leaderboard[0]].prepend ? top10_job_names[leaderboard[0]].prepend : \"\"}{Number(player.amount).toLocaleString()}</td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>)}\r\n                    <h3>Leaderboards updates every hour<br/>Last Updated: {new Date(state.timestamp).toTimeString()}</h3>\r\n                    </>\r\n                }\r\n            </div>);\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\nimport { initAllServers } from \"../fetchdata\";\r\n\r\nexport default function Timer (){\r\n    const [state, setState] = useState({total: 0, online: 0});\r\n    const store = useContext(StoreContext);\r\n    \r\n    function handleOnClickRefresh(){\r\n        initAllServers()(store.dispatch)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState(s => {\r\n            let servers = 0;\r\n            let players = 0;\r\n            \r\n            (store.state.servers || []).forEach(server => {\r\n                if(!server.isLoaded || !server.serverData) return;\r\n                servers++;\r\n                if(server.playersData) players += server.playersData.length;\r\n            })\r\n\r\n            return ({\r\n                ...s,\r\n                total: store.state.servers.length,\r\n                servers,\r\n                players\r\n            });\r\n\r\n        });\r\n\r\n    },[store.state.servers]);\r\n\r\n    return (\r\n        <div id=\"footer\">\r\n            <input type=\"button\" value={`Servers Loaded: ${state.servers}/${state.total} | Players Online: ${state.players} | click to refresh`} className=\"refresh dxpcursor\" onClick={handleOnClickRefresh}/>\r\n        </div> \r\n    )\r\n}","import React, { useContext } from \"react\";\r\nimport { StoreContext } from \"../store\";\r\n\r\nexport default function HighestID () {\r\n    const store = useContext(StoreContext);\r\n\r\n    let players_list = [];\r\n\r\n    store.state.servers.forEach((server, index) => {\r\n        if(server.playersData) players_list.push(...server.playersData);\r\n    });\r\n\r\n    players_list = players_list\r\n                    .sort((a,b) => b[2] - a[2])\r\n                    .map((data, index) => ({\r\n                            index: index+1, \r\n                            name: data[0], \r\n                            id: data[2]\r\n                        }));\r\n\r\n    const final_list = players_list.length > 25 ? \r\n                        [\r\n                            ...players_list.splice(0, 10),\r\n                            {\r\n                                index: '...', \r\n                                name: '...', \r\n                                id: '...'\r\n                            },\r\n                            ...players_list.splice(players_list.length-10)\r\n                        ] : players_list;\r\n\r\n    if(store.state.inited === false){\r\n        return <h2>Loading</h2>;\r\n    }else{\r\n        return (\r\n            <div>\r\n                <h3>Highest and lowest player IDs currently online</h3>\r\n                <table>\r\n                    <tbody>\r\n                        <tr><th>#</th><th>Name</th><th>ID</th></tr>\r\n                        {final_list.length === 0 ? <tr><th></th><th>No Players Found</th><th></th></tr> : \r\n                        \r\n                            final_list.map((player, index) => (\r\n                                <tr key={index} style={index === 0 ? {fontSize: '2em'} : {}}>\r\n                                    <td>#{player.index}</td>\r\n                                    <td><b>{player.name ? player.name : \"?\"}</b></td>\r\n                                    <td>{player.id}</td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport ServersStatus from \"./ServersStatus\";\r\nimport ServerInfo from \"./ServerInfo\";\r\nimport PlayerFinder from \"./PlayerFinder\";\r\nimport JobsStats from \"./JobsStats\";\r\nimport VehicleStats from \"./VehicleStats\";\r\nimport TopTen from \"./TopTen\";\r\nimport Footer from \"./Footer\";\r\nimport { StoreProvider } from '../store';\r\nimport HighestID from \"./HighestID\";\r\n\r\n\r\nexport default function App() {\r\n  React.useEffect(()=>{\r\n    document.title = \"TTSTATS | Transport Tycoon Server Browser\";\r\n  },[])\r\n\r\n  return (\r\n    <Router basename=\"/\">\r\n    {/* <Router basename=\"ttstats\"> */}\r\n      <StoreProvider>\r\n        <div id=\"header\">\r\n          <ul>\r\n            <li><Link to=\"/\">Servers Status</Link></li>\r\n            <li><Link to=\"?playerfinder\">Player Finder</Link></li>\r\n            <li><Link to=\"?vehicles\">Vehicle Stats</Link></li>\r\n            <li><Link to=\"?jobs\">Job Stats</Link></li>\r\n            <li><Link to=\"?top10\">Top 10</Link></li>\r\n            <li><Link to=\"?highest_id\">Highest Player ID</Link></li>\r\n            {/* <li><a href=\"http://ttmap.aca.lt\" className=\"gold\">ttmap.aca.lt</a></li> */}\r\n          </ul>\r\n        </div>\r\n\r\n        <div id=\"content\">\r\n          <Route component={\r\n            (props)=>{\r\n              const url = props.location.search.split(\"=\");\r\n              switch(url[0]){\r\n                case (\"\"):\r\n                case (\"?status\"):\r\n                  return <ServersStatus/>;\r\n                case (\"?serverinfo\"):\r\n                  return <ServerInfo url={url}/>;\r\n                case (\"?jobs\"):\r\n                  return <JobsStats/>;\r\n                case (\"?vehicles\"):\r\n                  return <VehicleStats/>;\r\n                case (\"?top10\"):\r\n                  return <TopTen/>;\r\n                case (\"?playerfinder\"):\r\n                  return <PlayerFinder url={url}/>;\r\n                case (\"?highest_id\"):\r\n                  return <HighestID/>;\r\n                default:\r\n                  return <Redirect to=\"/\"/>;\r\n              }\r\n            }}/>\r\n        </div>\r\n\r\n        <Footer/>\r\n      </StoreProvider>\r\n    </Router>\r\n  );\r\n}\r\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./style.scss\";\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}
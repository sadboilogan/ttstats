{"version":3,"sources":["fetchServers.js","store.js","Something.js","ServersList2.js","App.js","serviceWorker.js","index.js"],"names":["initAllServers","dispatch","serversListJSON","forEach","server","index","type","data","fetchServer","fetch","process","then","res","json","isLoaded","playersData","players","serverData","lastUpdate","Date","now","error","store","createStore","action","servers","push","map","inited","tempArray","slice","splice","name","value","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","Something","e","this","state","text","props","sendTheAlert","setState","target","previousSibling","console","log","getState","onClick","posts","length","React","Component","connect","_this","ServersList2","id","key","ip","style","color","limit","updatePlayersList","App","basename","to","component","location","search","Home","PlayerFinder","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.866019bd.chunk.js","sourcesContent":["// import store from \"./store.js\"\r\nimport serversListJSON from \"./serversList.json\";\r\n// import serversListJSON from \"./serversListEmpty.json\";\r\n\r\nexport const initAllServers = () => dispatch => {\r\n    serversListJSON.forEach((server,index) => {\r\n        dispatch({\r\n            type: \"ADDSERVER\",\r\n            data: {\r\n                \"error\": null,\r\n                \"isLoaded\": false,\r\n                \"ip\": server[0],\r\n                \"name\": server[1],\r\n                \"playersData\": null,\r\n                \"serverData\": null,\r\n                \"lastUpdate\": null\r\n            },\r\n            index\r\n        })\r\n        fetchServer(server,index)(dispatch);\r\n    });\r\n\r\n    dispatch({type: \"SERVERSINITED\"})\r\n};\r\n\r\n\r\n// const fetchServer = (server,index) => {\r\nexport const fetchServer = (server,index) => dispatch => {\r\n    //https://cors-anywhere.herokuapp.com/\r\n    fetch((!process?\"https://cors-anywhere.herokuapp.com/\":\"\")+\"http://\"+server[0]+\"/status/widget/players.json\")\r\n    .then(res => res.json())\r\n    .then(\r\n        (res) => \r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    isLoaded: true,\r\n                    playersData: res.players,\r\n                    serverData: res.server,\r\n                    lastUpdate: Date.now()\r\n                },\r\n                index\r\n            }),\r\n        (error) => {\r\n            dispatch({\r\n                type: \"UPDATESERVER\",\r\n                data: {\r\n                    isLoaded: true,\r\n                    error,\r\n                    lastUpdate: Date.now()\r\n                },\r\n                index\r\n            })\r\n        }\r\n    )\r\n}\r\n  \r\n\r\n// const fetchAllServers = () => {\r\n//     store.dispatch({type: \"SET\", data: {\r\n\r\n//         servers: serversListJSON.map(server=>({\r\n//         \"error\": null,\r\n//         \"isLoaded\": false,\r\n//         \"ip\": server[0],\r\n//         \"name\": server[1],\r\n//         \"playersData\": null,\r\n//         \"serverData\": null,\r\n//         \"lastUpdate\": null\r\n\r\n//     }))}});\r\n\r\n//     store.getState().servers.forEach((element,index) => {\r\n//         return fetchServer(element.ip,index)\r\n//     });\r\n// }\r\n\r\n// const fetchServer = (server,index) => {\r\n//     //https://cors-anywhere.herokuapp.com/\r\n//     // fetch((!process?\"https://cors-anywhere.herokuapp.com/\":\"\")+\"http://\"+server.ip+\"/status/widget/players.json\")\r\n//     fetch(server)\r\n//     .then(res => res.json())\r\n//     .then(\r\n//         (res) => {\r\n//             store.dispatch({type: \"FETCHSERVER\", data: {\r\n//                 isLoaded: true,\r\n//                 playersData: res.players,\r\n//                 serverData: res.server,\r\n//                 lastUpdate: Date.now()\r\n//             },index})\r\n//         },\r\n//         (error) => {\r\n//             store.dispatch({type: \"FETCHSERVER\", data: {\r\n//                 isLoaded: true,\r\n//                 error\r\n//             },index})\r\n//         }\r\n//     )\r\n// }\r\n\r\n// const fetchServer = (ip,index) =>{\r\n//     fetch(ip)\r\n//     .then(res => res.json())\r\n//     .then(res =>{\r\n        \r\n//         // let data = store.getState();\r\n        \r\n//         // data.servers.push(res);\r\n//         // console.log(data)\r\n\r\n//         store.dispatch({type: \"PUSH\", data: res});\r\n\r\n//     });\r\n// }\r\n\r\n// export default {fetchAllServers, fetchServer}\r\n\r\n// export default class ServersData extends React.Component {\r\n//     constructor(props) {\r\n//       super(props);\r\n//       this.state = {\r\n//         playerFinderMessages: \"\",\r\n//         playerFinderInputField: \"\",\r\n//         playerFinderFound: [],\r\n//         currentServerFocus: null,\r\n//         servers: serversListJSON.map(server=>({\r\n//           \"error\": null,\r\n//           \"isLoaded\": false,\r\n//           \"ip\": server[0],\r\n//           \"name\": server[1],\r\n//           \"playersData\": null,\r\n//           \"serverData\": null,\r\n//           \"lastUpdate\": null\r\n//         }))\r\n//       };\r\n\r\n//       this.refreshServers = this.refreshServers.bind(this);\r\n//       this.fetchServer = this.fetchServer.bind(this);\r\n//       this.refreshServers();\r\n//       console.log(\"ServersData\",props);\r\n//     }\r\n\r\n//     refreshServers () {\r\n//         console.log(\"refreshing all\")\r\n//         this.state.servers.forEach(this.fetchServer);\r\n//         // this.state.servers.forEach((u)=>console.log(u));\r\n//         return true;\r\n//     }\r\n\r\n//     fetchServer (server,index) {\r\n//         //https://cors-anywhere.herokuapp.com/\r\n//         fetch((!process?\"https://cors-anywhere.herokuapp.com/\":\"\")+\"http://\"+server.ip+\"/status/widget/players.json\")\r\n//         .then(res => res.json())\r\n//         .then(\r\n//             (res) => {\r\n//             this.setState(state => {\r\n//                 const {servers} = state;\r\n//                 servers[index].isLoaded = true;\r\n//                 servers[index].playersData = res.players;\r\n//                 servers[index].serverData = res.server;\r\n//                 servers[index].lastUpdate = Date.now();\r\n//                 return {servers};\r\n//             });\r\n//             },\r\n//             (error) => {\r\n//             this.setState(state => {\r\n//                 const {servers} = state;\r\n//                 servers[index].isLoaded = true;\r\n//                 servers[index].error = error;\r\n//                 return {servers};\r\n//             });\r\n//             }\r\n//         )\r\n//     }\r\n\r\n//     componentDidMount() {     \r\n//         console.log(\"componentDidMount\")\r\n//         this.refreshServers();\r\n//         return;\r\n//     }\r\n\r\n//     componentWillUnmount() {\r\n//         console.log(\"componentWillUnmount\")\r\n//         return;\r\n//     }\r\n\r\n//     render() { \r\n//         console.log(\"render\");\r\n//         return null; \r\n//     }\r\n// }\r\n","\r\n// import React from \"react\";\r\n// import serversListJSON from \"./serversList.json\";\r\n// import serversListJSON from \"./serversListEmpty.json\";\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst reducer = (data, action) => {\r\n    switch(action.type){\r\n        case (\"SET\"):\r\n            return {\r\n                ...data,\r\n                ...action.data\r\n            }\r\n        case (\"PUSH\"):\r\n            if(data.servers) data.servers.push(action.data)\r\n            else data.servers = [action.data];\r\n            return {...data};\r\n        case (\"UPDATESERVER\"):\r\n            data.servers = data.servers.map((data, index) => index !== action.index ? data : {\r\n                  ...data,\r\n                  ...action.data\r\n                });\r\n            return {...data};\r\n        case (\"SERVERSINITED\"):\r\n            return {...data, inited: true};\r\n        case (\"ADDSERVER\"):\r\n            // if(!data.servers) data.servers = [];\r\n            const tempArray = data.servers.slice()\r\n            tempArray.splice(action.index, 0, action.data)\r\n            data.servers = tempArray;\r\n            return {...data}\r\n        case (\"SETKEY\"):\r\n            data[action.data.name] = action.data.value;\r\n            return {...data};\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    {\r\n        servers: [],\r\n        inited: false\r\n    },\r\n  compose(\r\n    applyMiddleware(...[thunk]),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\n\r\n\r\nstore.dispatch({type: 'SET', data: {servers: []}})\r\n// console.log(\"store\",store.getState())\r\n\r\nexport default store;\r\n\r\n// const reducer = (data, action) => {\r\n//     switch(action.type){\r\n//         // case (\"SET\"):\r\n//         //     return action.data || data\r\n//         case (\"SET\"):\r\n//             return {\r\n//                 ...data,\r\n//                 ...action.data\r\n//             }\r\n//         // return Object.assign(action.data,data)\r\n//         case (\"SETKEY\"):\r\n//             data[action.data.name] = action.data.value;\r\n//             return data;\r\n//         default:\r\n//             return data;\r\n//     }\r\n// }\r\n\r\n// const db = {\r\n//     servers: serversListJSON.map(()=>(createStore(reducer))),\r\n\r\n//     set: (db, obj) => db.dispatch({type: 'SET', data: obj}),\r\n//     append: (db, obj) => db.dispatch({type: 'APPEND', data: obj}),\r\n//     setkey: (db, name, value) => db.dispatch({type: 'SETKEY', data: {name,value}}),\r\n//     get: (db) => db.getState(),\r\n// }\r\n// console.log(db);\r\n// const db = createStore(container);\r\n// export default db;\r\n\r\n\r\n// db.subscribe((db) => console.log(db.getState()))\r\n\r\n\r\n\r\n\r\n// export default mystates;\r\n\r\n// db.set({\"kebat\":\"potata\"})\r\n\r\n\r\n// stateOne.update = (obj) => {\r\n//   stateOne.dispatch({type: 'SET', data: obj})\r\n// }\r\n\r\n// stateOne.subscribe(() => console.log(stateOne.getState()))\r\n\r\n// stateOne.update();\r\n// stateOne.update({kebab:\"Test\"});\r\n// stateOne.update();\r\n\r\n// stateOne.update({\"kebat\":\"potato\"})\r\n\r\n\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport store from \"./store.js\"\r\n// import fetchServers from \"./fetchServers.js\"\r\n\r\n\r\nclass Something extends React.Component{\r\n    // constructor(props){\r\n    //     super(props)\r\n    //     // this._sm = props.data._sm || null;\r\n    //     console.log(\"props\",props)\r\n    //     this.state = {};\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     fetchServers.fetchAllServers();\r\n    // }\r\n\r\n    // getSnapshotBeforeUpdate(prevProps, prevState){\r\n    //     console.log(prevProps,prevState)\r\n    // }\r\n\r\n    pushMessage (e) {\r\n        if(this.state && this.state.text){\r\n            this.props.sendTheAlert(this);\r\n            this.setState({text:\"\"})\r\n            e.target.previousSibling.value = \"\"\r\n        }\r\n        // this.props.posts.servers.setState()\r\n        // this.setState();\r\n        // console.log(this);\r\n        console.log(store.getState())\r\n\r\n    }\r\n\r\n    render () {\r\n        return <div>\r\n            {/* <input type=\"button\" value=\"battatat\" onClick={()=>fetchServers.fetchAllServers()}/> */}\r\n            <input type=\"button\" value=\"state\" onClick={()=>console.log(store.getState())}/>\r\n            {this.props.posts.servers.length}\r\n        </div>;\r\n        // let element = <div>Empty</div>\r\n        // if(this.props.posts.servers){\r\n        //     element = this.props.posts.servers.map((item,index)=><i key={index}>{item}<br></br></i>)\r\n        // }\r\n        // return (<div>\r\n        //     <input type=\"text\" id=\"potato\" onChange={(e)=>this.setState({\"text\": e.target.value})}/>\r\n        //     {/* <input type=\"button\" value=\"kopab\" onClick={(e)=>{store.dispatch({type: \"PUSH\", data: this.state.text});console.log(store.getState())}}/> */}\r\n        //     <input type=\"button\" value=\"kopab\" onClick={(e)=>this.pushMessage(e)}/>\r\n        //     <input type=\"button\" value=\"battatat\" onClick={()=>fetchServers.fetchAllServers()}/>\r\n        //     <br/>\r\n        //     {/* <input type=\"button\" value=\"kopab\" onClick={(e)=>{mapDispatchToProps.push(this.state.text);console.log(store.getState())}}/> */}\r\n        //     {element}\r\n        // </div>)\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//       push: (value) => dispatch({type: \"PUSH\", data: value}),\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//       onTodoClick: (id) => {\r\n//         dispatch(toggleTodo(id))\r\n//       }\r\n//     }\r\n// }\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    sendTheAlert: (_this) => {dispatch({type: \"PUSH\", data: _this.state.text})}\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: state\r\n});\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Something);\r\n\r\n// export default connect(null, { store })(Something);","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport store from \"./store.js\"\r\nimport {initAllServers} from \"./fetchServers.js\"\r\n\r\n\r\nclass ServersList2 extends React.Component{\r\n\r\n    componentDidMount(){\r\n        console.log(\"inited: \"+this.props.inited)\r\n        \r\n    }\r\n\r\n    render () {\r\n        // console.log(this.props)\r\n        // return <div>\r\n        //     <div>\r\n        //     <input type=\"button\" value=\"battatat\" onClick={()=>fetchServers.initAllServers()}/>\r\n        //     <input type=\"button\" value=\"state\" onClick={()=>console.log(store.getState())}/>\r\n        //     <input type=\"button\" value=\"props\" onClick={()=>console.log(this.props.servers)}/>\r\n        //     </div>\r\n        //     <hr/>\r\n\r\n        // </div>;\r\n\r\n        return (\r\n        <div>\r\n            <div>\r\n            {this.props.inited === false ? <input type=\"button\" value=\"battatat\" onClick={()=>(this.props.initAllServers())}/> : \"\"}\r\n            \r\n            <input type=\"button\" value=\"state\" onClick={()=>console.log(store.getState())}/>\r\n            <input type=\"button\" value=\"props\" onClick={()=>console.log(this.props.servers)}/>\r\n            {/* <input type=\"button\" value=\"Refresh Servers\" onClick={()=>console.log(this.serversdata.refreshServers(true))}/> */}\r\n            </div>\r\n\r\n        <hr/>\r\n        \r\n        <h2>Transport Tycoon Servers List</h2>\r\n        <table id=\"serversList\">\r\n           <tbody>\r\n            {this.props.servers.map((server,index)=>{\r\n                if (server.error) {\r\n                    return (\r\n                        <tr key={index}><td>{server.ip}</td><td>{server.name}</td><td>-/-</td><td style={{color: \"red\"}}>Offline</td><td></td><td></td></tr>\r\n                    );\r\n    \r\n                } else if (server.isLoaded === false) {\r\n    \r\n                    return (\r\n                        <tr key={index}><td>{server.ip}</td><td>{server.name}</td><td>-/-</td><td style={{color: \"grey\"}}>Loading</td><td></td><td></td></tr>\r\n                    );\r\n    \r\n                } else {\r\n                    return (\r\n                        <tr key={index}><td>{server.ip}</td><td>{server.name}</td><td>{server.playersData.length}/{server.serverData.limit}</td><td style={{color: \"blue\"}}>Online</td><td>{server.lastUpdate}</td><td><input type=\"button\" value=\"Players\" onClick={()=>this.updatePlayersList(index)}/></td></tr>\r\n                    );\r\n                }\r\n          })}\r\n          </tbody>\r\n        </table>\r\n        </div>\r\n        )\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    servers: state.servers,\r\n    inited: state.inited\r\n});\r\n\r\n  \r\nexport default connect(mapStateToProps, {initAllServers})(ServersList2);\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./App.css\";\r\n// import ServersList from \"./ServersList.js\";\r\nimport store from \"./store.js\";\r\nimport Something from \"./Something.js\";\r\nimport ServersList2 from \"./ServersList2.js\";\r\n\r\n// export default function App() {\r\nexport default class App extends React.Component {\r\n  render(){\r\n    return (\r\n      <Router basename=\"ttstats\">\r\n        <Provider store={store}>\r\n        \r\n        <header>\r\n          <ul>\r\n            <li><Link to=\"/\">Page 1</Link></li>\r\n            <li><Link to=\"?servers\">Servers</Link></li>\r\n            <li><Link to=\"?playerfinder\">Player Finder</Link></li>\r\n            <li><Link to=\"?something\">Something</Link></li>\r\n            <li><Link to=\"?ServersList2\">ServersList2</Link></li>\r\n          </ul>\r\n\r\n        </header>\r\n        {/* <store ref={this.store}/>; */}\r\n        <main>\r\n          <Route component={\r\n            (props)=>{\r\n              switch(props.location.search){\r\n                case (\"\"):\r\n                    return <Home/>;\r\n                    case (\"?servers\"):\r\n                      return <PlayerFinder data={this}/>;\r\n                      // return <ServersList data={this}/>;\r\n                  // return <ServersList serversData={this}/>;\r\n                case (\"?playerfinder\"):\r\n                    return <PlayerFinder data={this}/>;\r\n                case (\"?something\"):\r\n                    return <Something data={this}/>;\r\n                case (\"?ServersList2\"):\r\n                    return <ServersList2/>;\r\n                default:\r\n                    return <Redirect to=\"/\"/>;\r\n              }\r\n            }}/>\r\n\r\n        </main>\r\n        <footer>\r\n          <p>Footer</p>\r\n        </footer>\r\n      </Provider>\r\n      </Router>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      {/* <input type=\"text\" value={MainData.getState().text} onChange={(el)=>MainData.setkey(\"text\",el.target.value)}/> */}\r\n\r\n      <h2>sgasgsdagsd</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction PlayerFinder(props) {\r\n  console.log(props)\r\n  return (\r\n  <div>\r\n    {/* {props.state.renderPlayersFinder()} */}\r\n  </div>\r\n  )\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
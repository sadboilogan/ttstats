{"version":3,"sources":["ServersList.js","App.js","serviceWorker.js","index.js"],"names":["ServersList","props","fetchServer","server","index","fetch","process","ip","then","res","json","setState","state","servers","isLoaded","playersData","players","serverData","lastUpdate","Date","now","error","playerFinderMessages","playerFinderInputField","playerFinderFound","currentServerFocus","serversListJSON","map","this","input","target","value","length","toLocaleLowerCase","forEach","player","playername","toLowerCase","includes","push","id","type","placeholder","onChange","handlePlayersNameInput","onClick","handlePlayerFinderSubmit","key","console","log","src","class","alt","element","name","closePlayersList","href","height","className","toTimeString","refreshServers","style","color","limit","updatePlayersList","renderPlayersList","renderPlayersFinder","React","Component","App","basename","to","component","location","search","PlayerFinder","data","Home","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e234901f.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport serversListJSON from \"./serversList.json\";\r\n// import MainData from \"./ServersDataManager.js\";\r\n\r\n// function fetchServer(_this,server,index){\r\n//   //https://cors-anywhere.herokuapp.com/\r\n//   fetch(\"http://\"+server.ip+\"/status/widget/players.json\")\r\n//   .then(res => res.json())\r\n//   .then(\r\n//     (res) => {\r\n//       _this.setState(state => {\r\n//         const {servers} = state;\r\n//         servers[index].isLoaded = true;\r\n//         servers[index].playersData = res.players;\r\n//         servers[index].serverData = res.server;\r\n//         servers[index].lastUpdate = Date.now();\r\n//         return {servers};\r\n//       });\r\n//     },\r\n//     (error) => {\r\n//       _this.setState(state => {\r\n//         const {servers} = state;\r\n//         servers[index].isLoaded = true;\r\n//         servers[index].error = error;\r\n//         return {servers};\r\n//       });\r\n//     }\r\n//   )\r\n// }\r\n\r\nexport default class ServersList extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        playerFinderMessages: \"\",\r\n        playerFinderInputField: \"\",\r\n        playerFinderFound: [],\r\n        currentServerFocus: null,\r\n        servers: serversListJSON.map(server=>({\r\n          error: null,\r\n          isLoaded: false,\r\n          \"ip\": server[0],\r\n          \"name\": server[1],\r\n          \"playersData\": null,\r\n          \"serverData\": null,\r\n          \"lastUpdate\": null\r\n        }))\r\n      };\r\n\r\n      ;\r\n    }\r\n\r\n    // close = (index) =>{\r\n    //   this.fetchServer(this.state.servers[index],index);\r\n    //   return;\r\n    // }\r\n\r\n    updatePlayersList (index) {\r\n      this.setState({currentServerFocus: index})\r\n      return;\r\n    }\r\n\r\n    closePlayersList () {\r\n      this.setState({currentServerFocus: null})\r\n      return;\r\n    }\r\n\r\n    handlePlayersNameInput (input) {\r\n      this.setState({ playerFinderInputField: input.target.value });\r\n    }\r\n\r\n    handlePlayerFinderSubmit () {\r\n      if(!this.state.playerFinderInputField || this.state.playerFinderInputField.length < 1)\r\n        return this.setState({playerFinderMessages: \"Invalid name or in-game id\"});\r\n      const input = this.state.playerFinderInputField.toLocaleLowerCase()\r\n      const playerFinderFound = [];\r\n      this.state.servers.forEach(server=>{\r\n        if(server.playersData === null)return;\r\n        server.playersData.forEach(player=>{\r\n          const playername = (player[0]+\"#\"+player[2]);\r\n          if(playername.toLowerCase().includes(input))\r\n          playerFinderFound.push(\r\n                [\r\n                  playername,\r\n                  server[\"ip\"],\r\n                  server[\"name\"],\r\n                  player[3],\r\n                  player[5]\r\n                ]\r\n        )})\r\n      })\r\n      if(playerFinderFound.length > 0){\r\n        // Object { playername: \"agsdgasdg#123165\", ip: \"121\", name: \"Server #2\" }\r\n        this.setState({\r\n          playerFinderMessages: \"Found \" + playerFinderFound.length + \" player\" +(playerFinderFound.length === 1 ?\"\":\"s\"),\r\n          playerFinderFound\r\n        });\r\n      }else{\r\n        this.setState({\r\n          playerFinderMessages: \"Found nothing\",\r\n          playerFinderFound: []\r\n        });\r\n      }\r\n      \r\n    }\r\n\r\n    renderPlayersFinder(){\r\n      return (\r\n        <div id=\"playerFinder\">\r\n        <h2>Player Finder:</h2>\r\n\r\n        <form>\r\n          <input type=\"text\" placeholder=\"Player's name or in-game id\" onChange={(input)=>this.handlePlayersNameInput(input)}/>\r\n          <input type=\"button\" value=\"search\" onClick={()=>this.handlePlayerFinderSubmit()}/>\r\n        </form>\r\n\r\n        <div>\r\n        <p>\r\n          {this.state.playerFinderMessages}\r\n        </p>\r\n        \r\n        <table id=\"playersFound\">\r\n          <tbody>\r\n          {this.state.playerFinderFound.map((player,index)=>\r\n          \r\n          <tr key={index}>\r\n            <td>{player[0]}{console.log(player)}</td>\r\n            <td>{player[1]}</td>\r\n            <td>{player[2]}</td>\r\n            <td><img src={player[3]} class=\"avatar\" alt=\"avatar\"/></td>\r\n            <td>{player[4]}</td>\r\n            </tr>\r\n          \r\n          )}\r\n          </tbody>\r\n          </table>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n    refreshServers () {\r\n      this.state.servers.forEach(this.fetchServer);\r\n      return;\r\n    }\r\n\r\n    fetchServer = (server,index) => {\r\n      //https://cors-anywhere.herokuapp.com/\r\n      fetch((!process?\"https://cors-anywhere.herokuapp.com/\":\"\")+\"http://\"+server.ip+\"/status/widget/players.json\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (res) => {\r\n          this.setState(state => {\r\n            const {servers} = state;\r\n            servers[index].isLoaded = true;\r\n            servers[index].playersData = res.players;\r\n            servers[index].serverData = res.server;\r\n            servers[index].lastUpdate = Date.now();\r\n            return {servers};\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState(state => {\r\n            const {servers} = state;\r\n            servers[index].isLoaded = true;\r\n            servers[index].error = error;\r\n            return {servers};\r\n          });\r\n        }\r\n      )\r\n    }\r\n    \r\n    renderPlayersList () {\r\n      let element;\r\n    \r\n      if(this.state.currentServerFocus !== null){\r\n        if(this.state.servers[this.state.currentServerFocus].playersData.length === 0){\r\n    \r\n          element = <div><h2>Selected Server Is Empty</h2></div>\r\n    \r\n        }else{\r\n          \r\n          element = (<div>\r\n          <h2>\r\n          Players List On {this.state.servers[this.state.currentServerFocus].name} <input type=\"button\" value=\"CLOSE\" onClick={()=>this.closePlayersList()}/><br/>\r\n          IP: <a href ={\"fivem://connect/\" + this.state.servers[this.state.currentServerFocus].ip}>{this.state.servers[this.state.currentServerFocus].ip}</a> </h2>\r\n          \r\n          <table id=\"playersList\">\r\n            <tbody>\r\n            <tr><th>#</th><th>Name</th><th>ID</th><th>Avatar</th></tr>\r\n            \r\n            {this.state.servers[this.state.currentServerFocus].playersData.map((player,index) => (\r\n            <tr key={player[2]}>\r\n              <td>{index+1}</td>\r\n              <td>{player[0]}</td>\r\n              <td>{player[2]}</td>\r\n              <td>{player[3] ? (<img src={player[3] || \"#\"} height=\"50px\" alt=\"img\"/>) : <div className=\"no-avatar\"/>}</td>\r\n            </tr>\r\n            ))}\r\n    \r\n            </tbody>\r\n          </table>\r\n          <h2>Updated on {new Date(this.state.servers[this.state.currentServerFocus].lastUpdate).toTimeString()}</h2>\r\n          </div>)\r\n        }\r\n      }\r\n      return element;\r\n    }\r\n\r\n\r\n\r\n\r\n    componentDidMount() {          \r\n      this.refreshServers();\r\n      return;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      console.log(\"componentWillUnmount\")\r\n      return;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n      return (\r\n      <div>\r\n        <input type=\"button\" value=\"Refresh Servers\" onClick={()=>this.refreshServers()}/>\r\n        {/* <input type=\"button\" value=\"Refresh Servers\" onClick={()=>this.state.servers.forEach(this.fetchServer)}/> */}\r\n      <h2>Transport Tycoon Servers List</h2>\r\n      <table id=\"serversList\">\r\n         <tbody>\r\n\r\n          {this.state.servers.map((server,index)=>{\r\n          if (server.error) {\r\n              // return <div key={index}><h2>Error: {server.error.message}</h2></div>;\r\n              return (\r\n                <tr key={index}><td>{server.ip}</td><td>{server.name}</td><td>-/-</td><td style={{color: \"red\"}}>Offline</td><td></td><td></td></tr>\r\n              );\r\n\r\n          } else if (!server.isLoaded) {\r\n\r\n            return (\r\n              <tr key={index}><td>{server.ip}</td><td>{server.name}</td><td>-/-</td><td style={{color: \"grey\"}}>Loading</td><td></td><td></td></tr>\r\n            );\r\n\r\n          } else {\r\n\r\n            return (\r\n              <tr key={index}><td>{server.ip}</td><td>{server.name}</td><td>{server.playersData.length}/{server.serverData.limit}</td><td style={{color: \"blue\"}}>Online</td><td>{server.lastUpdate}</td><td><input type=\"button\" value=\"Players\" onClick={()=>this.updatePlayersList(index)}/></td></tr>\r\n            );\r\n          }\r\n        })}\r\n        </tbody>\r\n      </table>\r\n      {/* <input type=\"button\" value=\"test\" onClick={()=>console.log(MainData.get())}/> */}\r\n        <br/>\r\n        {this.renderPlayersList()}\r\n        <hr/>\r\n        {this.renderPlayersFinder()}\r\n      </div>\r\n      )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport ServersList from \"./ServersList.js\";\r\n// import MainData from \"./ServersDataManager.js\";\r\n\r\n\r\n\r\n// export default function App() {\r\nexport default class App extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // };\r\n  \r\n  render(){\r\n    return (\r\n      <Router basename=\"ttstats\">\r\n      <header>\r\n        <ul>\r\n          <li><Link to=\"/\">Page 1</Link></li>\r\n          <li><Link to=\"?servers\">Servers</Link></li>\r\n          <li><Link to=\"?playerfinder\">Player Finder</Link></li>\r\n        </ul>\r\n\r\n      </header>\r\n      <main>\r\n\r\n        <Route component={\r\n          (props)=>{\r\n              switch(props.location.search){\r\n                  case (\"?playerfinder\"):\r\n                      return <PlayerFinder data={this}/>;\r\n                  case (\"?servers\"):\r\n                      return <ServersList/>;\r\n                  case (\"\"):\r\n                      return <Home/>;\r\n                  default:\r\n                      return <Redirect to=\"/\"/>;\r\n              }\r\n          }}/>\r\n      </main>\r\n      <footer>\r\n        <p>Footer</p>\r\n      </footer>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Home() {\r\n  \r\n    return (\r\n      <div>\r\n        {/* <input type=\"text\" value={MainData.getState().text} onChange={(el)=>MainData.setkey(\"text\",el.target.value)}/> */}\r\n\r\n        <h2>sgasgsdagsd</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\nfunction PlayerFinder(props) {\r\n  return (\r\n      \r\n    <div>\r\n      <h2>PlayerFinder</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'core-js/stable'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}